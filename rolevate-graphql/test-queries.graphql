# ============================================
# GraphQL Test Queries for Rolevate Platform
# ============================================
# Use these queries in GraphQL Playground or any GraphQL client
# Base URLs:
# - Gateway: http://localhost:3000/graphql
# - Auth: http://localhost:3001/graphql
# - Business: http://localhost:3003/graphql
# - Candidate: http://localhost:3004/graphql
# ============================================

# ============================================
# 1. AUTH SERVICE TESTS (Port 3001)
# ============================================

# Test 1.1: Simple Hello Query
query AuthHello {
  authHello
}

# Test 1.2: Register a Business User
mutation RegisterBusiness {
  register(
    input: {
      email: "business@example.com"
      password: "SecurePass123!"
      firstName: "John"
      lastName: "Business"
      phoneNumber: "+1234567890"
      role: BUSINESS
    }
  ) {
    message
    user {
      id
      email
      firstName
      lastName
      role
      isActive
      createdAt
    }
  }
}

# Test 1.3: Register a Candidate User
mutation RegisterCandidate {
  register(
    input: {
      email: "candidate@example.com"
      password: "SecurePass123!"
      firstName: "Jane"
      lastName: "Candidate"
      phoneNumber: "+0987654321"
      role: CANDIDATE
    }
  ) {
    message
    user {
      id
      email
      firstName
      lastName
      role
      isActive
      createdAt
    }
  }
}

# Test 1.4: Login as Business User
mutation LoginBusiness {
  login(input: { email: "business@example.com", password: "SecurePass123!" }) {
    accessToken
    user {
      id
      email
      firstName
      lastName
      role
    }
  }
}

# Test 1.5: Login as Candidate User
mutation LoginCandidate {
  login(input: { email: "candidate@example.com", password: "SecurePass123!" }) {
    accessToken
    user {
      id
      email
      firstName
      lastName
      role
    }
  }
}

# ============================================
# 2. BUSINESS SERVICE TESTS (Port 3003)
# ============================================

# Test 2.1: Company Hello Query
query CompanyHello {
  companyHello
}

# Test 2.2: Job Hello Query
query JobHello {
  jobHello
}

# Test 2.3: Get All Companies
query GetAllCompanies {
  companies {
    id
    name
    description
    industry
    website
    location
    companySize
    isActive
    createdAt
  }
}

# Test 2.4: Get Company by ID
query GetCompanyById {
  company(id: "your-company-uuid-here") {
    id
    name
    description
    industry
    website
    logo
    location
    companySize
    benefits
    isActive
    createdAt
    updatedAt
  }
}

# Test 2.5: Get All Jobs
query GetAllJobs {
  jobs {
    id
    title
    description
    jobType
    experienceLevel
    location
    isRemote
    salaryMin
    salaryMax
    salaryCurrency
    isActive
    createdAt
  }
}

# Test 2.6: Get Job by ID
query GetJobById {
  job(id: "your-job-uuid-here") {
    id
    title
    description
    jobType
    experienceLevel
    location
    isRemote
    salaryMin
    salaryMax
    salaryCurrency
    skills
    benefits
    isActive
    expiresAt
    createdAt
    updatedAt
  }
}

# ============================================
# 3. CANDIDATE SERVICE TESTS (Port 3004)
# ============================================

# Test 3.1: Candidate Profile Hello Query
query CandidateHello {
  candidateHello
}

# Test 3.2: Application Hello Query
query ApplicationHello {
  applicationHello
}

# Test 3.3: Get All Candidate Profiles
query GetAllCandidateProfiles {
  candidateProfiles {
    id
    userId
    title
    bio
    skills
    location
    isOpenToWork
    yearsOfExperience
    createdAt
  }
}

# Test 3.4: Get Candidate Profile by ID
query GetCandidateProfileById {
  candidateProfile(id: "your-candidate-profile-uuid-here") {
    id
    userId
    title
    bio
    skills
    resumeUrl
    portfolioUrl
    linkedinUrl
    githubUrl
    location
    isOpenToWork
    preferredJobTypes
    yearsOfExperience
    createdAt
    updatedAt
  }
}

# Test 3.5: Get All Applications
query GetAllApplications {
  applications {
    id
    candidateId
    jobId
    status
    appliedAt
    createdAt
  }
}

# Test 3.6: Get Application by ID
query GetApplicationById {
  application(id: "your-application-uuid-here") {
    id
    candidateId
    jobId
    coverLetter
    resumeUrl
    status
    notes
    appliedAt
    createdAt
    updatedAt
  }
}

# ============================================
# 4. GATEWAY TESTS (Port 3000)
# ============================================

# Test 4.1: Gateway Hello Query
query GatewayHello {
  hello
}

# Test 4.2: Gateway Auth Hello
query GatewayAuthHello {
  authHello
}

# Test 4.3: Register through Gateway
mutation GatewayRegister {
  register(
    input: {
      email: "gateway-user@example.com"
      password: "SecurePass123!"
      firstName: "Gateway"
      lastName: "User"
      phoneNumber: "+1122334455"
      role: CANDIDATE
    }
  ) {
    message
    user {
      id
      email
      firstName
      lastName
      role
    }
  }
}

# Test 4.4: Login through Gateway
mutation GatewayLogin {
  login(
    input: { email: "gateway-user@example.com", password: "SecurePass123!" }
  ) {
    accessToken
    user {
      id
      email
      firstName
      lastName
      role
    }
  }
}

# ============================================
# 5. ERROR HANDLING TESTS
# ============================================

# Test 5.1: Register with Invalid Email
mutation RegisterInvalidEmail {
  register(
    input: {
      email: "invalid-email"
      password: "SecurePass123!"
      firstName: "Test"
      lastName: "User"
      phoneNumber: "+1234567890"
      role: CANDIDATE
    }
  ) {
    message
  }
}

# Test 5.2: Register with Short Password
mutation RegisterShortPassword {
  register(
    input: {
      email: "test@example.com"
      password: "short"
      firstName: "Test"
      lastName: "User"
      phoneNumber: "+1234567890"
      role: CANDIDATE
    }
  ) {
    message
  }
}

# Test 5.3: Login with Wrong Credentials
mutation LoginWrongPassword {
  login(input: { email: "business@example.com", password: "WrongPassword123!" }) {
    accessToken
  }
}

# Test 5.4: Login with Non-existent User
mutation LoginNonExistent {
  login(
    input: { email: "nonexistent@example.com", password: "SecurePass123!" }
  ) {
    accessToken
  }
}
