version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: rolevate-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-rolevate}
      POSTGRES_USER: ${DATABASE_USERNAME:-rolevate}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-rolevate}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rolevate-network

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: rolevate-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - rolevate-network

  # NestJS Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rolevate-api
    restart: unless-stopped
    ports:
      - "${PORT:-4005}:4005"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      JWT_SECRET: ${JWT_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RESET_TOKEN_EXPIRY_MINUTES: ${RESET_TOKEN_EXPIRY_MINUTES:-15}
      SYSTEM_API_KEY: ${SYSTEM_API_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      FRONTEND_URL: ${FRONTEND_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      EMAIL_FROM: ${EMAIL_FROM}
      WHATSAPP_VERIFY_TOKEN: ${WHATSAPP_VERIFY_TOKEN}
      WHATSAPP_APP_SECRET: ${WHATSAPP_APP_SECRET}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${WHATSAPP_BUSINESS_ACCOUNT_ID}
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET}
      FACEBOOK_SYSTEM_USER_ID: ${FACEBOOK_SYSTEM_USER_ID}
      FACEBOOK_SYSTEM_USER_TOKEN: ${FACEBOOK_SYSTEM_USER_TOKEN}
      LIVEKIT_URL: ${LIVEKIT_URL}
      LIVEKIT_API_KEY: ${LIVEKIT_API_KEY}
      LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET}
      CV_ANALYSIS_API_URL: ${CV_ANALYSIS_API_URL}
      FASTABI_URL: ${FASTABI_URL}
      GRAPHQL_API_URL: ${GRAPHQL_API_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4005/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rolevate-network
    volumes:
      # Mount logs directory for persistent logs
      - ./logs:/app/logs

networks:
  rolevate-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
