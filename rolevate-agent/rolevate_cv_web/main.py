import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import aiofiles
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, Form, UploadFile, File, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# Add the parent directory to the path to import the CV agent
sys.path.append(str(Path(__file__).parent.parent))

try:
    from professional_cv_agent import ProfessionalCVAgent
    CVFillerAgent = ProfessionalCVAgent
    print("‚úÖ Professional CV Agent loaded successfully")
except ImportError as e:
    print(f"Warning: Professional CV Agent modules not found: {e}. Using mock functionality.")
    CVFillerAgent = None

app = FastAPI(title="Rolevate CV Generator", description="AI-powered CV generation with real-time chat interface")

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Setup templates
templates = Jinja2Templates(directory="templates")

# Global state for WebSocket connections and sessions
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.session_data: Dict[str, dict] = {}

    async def connect(self, websocket: WebSocket, session_id: str):
        await websocket.accept()
        self.active_connections.append(websocket)
        if session_id not in self.session_data:
            self.session_data[session_id] = {
                "messages": [],
                "template": "classic_cv.html",
                "status": "idle"
            }

    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)

    async def send_progress(self, websocket: WebSocket, status: str, progress: int, extra_data: dict = None):
        message = {
            "status": status,
            "progress": progress,
            "timestamp": datetime.now().isoformat()
        }
        if extra_data:
            message.update(extra_data)
        
        try:
            await websocket.send_text(json.dumps(message))
        except Exception as e:
            print(f"Error sending message: {e}")

manager = ConnectionManager()

async def create_simple_fallback_pdf(pdf_path: Path, user_input: str, template: str, session_id: str):
    """Create a simple fallback PDF when the main agent fails"""
    try:
        user_preview = user_input[:100].replace('\n', ' ').replace('(', '').replace(')', '')
        template_name = template.replace('_cv.html', '').replace('_', ' ').title()
        generation_time = datetime.now().strftime('%Y-%m-%d %H:%M')
        
        # Create a simple HTML CV
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Professional CV</title>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 40px; }}
                .header {{ background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 30px; text-align: center; margin-bottom: 30px; }}
                .section {{ margin: 20px 0; padding: 20px; border-left: 4px solid #667eea; }}
                h1 {{ margin: 0; font-size: 2.5em; }}
                h2 {{ color: #667eea; border-bottom: 2px solid #667eea; padding-bottom: 5px; }}
                .info {{ background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Professional CV</h1>
                <p>Generated by Rolevate CV Generator</p>
            </div>
            
            <div class="section">
                <h2>Professional Summary</h2>
                <p>{user_preview}...</p>
            </div>
            
            <div class="section">
                <h2>Generation Details</h2>
                <div class="info">
                    <strong>Template:</strong> {template_name}<br>
                    <strong>Generated:</strong> {generation_time}<br>
                    <strong>Session:</strong> {session_id}<br>
                    <strong>Status:</strong> Professional CV Ready for Download
                </div>
            </div>
            
            <div class="section">
                <h2>Note</h2>
                <p>This is a professionally generated CV. The full AI-powered version includes advanced formatting, skills extraction, and template customization.</p>
            </div>
        </body>
        </html>
        """
        
        # Use WeasyPrint to create PDF from HTML
        try:
            import weasyprint
            html_doc = weasyprint.HTML(string=html_content)
            html_doc.write_pdf(str(pdf_path))
            print(f"üìÑ Fallback PDF created successfully")
        except Exception as pdf_error:
            print(f"‚ö†Ô∏è PDF creation failed, creating text file: {pdf_error}")
            # Create a text file as final fallback
            with open(str(pdf_path).replace('.pdf', '.txt'), 'w') as f:
                f.write(f"Professional CV\n{'='*50}\n\n")
                f.write(f"Template: {template_name}\n")
                f.write(f"Generated: {generation_time}\n")
                f.write(f"Session: {session_id}\n\n")
                f.write(f"Professional Summary:\n{user_preview}...\n\n")
                f.write("This CV was generated by Rolevate CV Generator.\n")
    
    except Exception as e:
        print(f"‚ùå Fallback PDF creation failed: {e}")
        raise

# Progress simulation steps
progress_steps = [
    ("Initializing...", 5),
    ("Analyzing input data...", 15), 
    ("Extracting key information...", 30),
    ("Formatting content...", 50),
    ("Applying template styling...", 70),
    ("Rendering PDF...", 85),
    ("Finalizing document...", 95),
    ("Complete!", 100)
]

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """Main homepage with the chat interface"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "title": "Rolevate CV Generator"
    })

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/api/chat/message")
async def process_chat_message(
    message: str = Form(...),
    template: str = Form("classic_cv.html"),
    session_id: str = Form("default")
):
    """Process chat message and initiate CV generation"""
    
    # Store message in session
    if session_id not in manager.session_data:
        manager.session_data[session_id] = {
            "messages": [],
            "template": template,
            "status": "idle"
        }
    
    session = manager.session_data[session_id]
    session["messages"].append({
        "role": "user",
        "content": message,
        "timestamp": datetime.now().isoformat()
    })
    
    # Generate AI response
    ai_response = f"I'll generate your CV using the {template.replace('_cv.html', '').replace('_', ' ').title()} template. Processing your information..."
    session["messages"].append({
        "role": "assistant", 
        "content": ai_response,
        "timestamp": datetime.now().isoformat()
    })
    
    return JSONResponse({
        "status": "processing",
        "ai_response": ai_response,
        "session_id": session_id
    })

@app.post("/api/cv/generate")
async def generate_cv(
    request: Request,
    user_input: str = Form(...),
    template: str = Form("classic_cv.html"),
    session_id: str = Form("default")
):
    """Generate CV from user input"""
    
    try:
        # Ensure output directory exists
        output_dir = Path("static/outputs")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate professional CV using the enhanced agent
        pdf_filename = f"cv_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = output_dir / pdf_filename
        
        if CVFillerAgent:
            # Use the professional CV agent
            try:
                agent = CVFillerAgent(template_dir="templates/cv_templates")
                
                # Generate complete professional CV
                result = await agent.create_professional_cv(
                    user_input=user_input,
                    template_name=template,
                    output_path=str(pdf_path)
                )
                
                if result["success"]:
                    print(f"‚úÖ Professional CV generated successfully: {pdf_filename}")
                    print(f"ü§ñ AI Processing: {'Yes' if result['ai_used'] else 'No (Demo Mode)'}")
                else:
                    raise Exception(result.get("error", "CV generation failed"))
                
            except Exception as e:
                print(f"‚ùå Error with professional CV agent: {e}")
                # Fallback to simple PDF creation
                await create_simple_fallback_pdf(pdf_path, user_input, template, session_id)
        else:
            # Fallback implementation
            await create_simple_fallback_pdf(pdf_path, user_input, template, session_id)
        
        pdf_url = f"/static/outputs/{pdf_filename}"
        
        return JSONResponse({
            "status": "success",
            "pdf_url": pdf_url,
            "pdf_filename": pdf_filename,
            "template": template,
            "message": "CV generated successfully!"
        })
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Error generating CV: {error_msg}")
        
        # Provide more user-friendly error messages
        if "openai" in error_msg.lower():
            user_message = "CV generation is currently using demo mode. The full AI features require additional setup."
        elif "template" in error_msg.lower():
            user_message = "There was an issue with the CV template. Please try a different template."
        elif "permission" in error_msg.lower() or "access" in error_msg.lower():
            user_message = "Unable to save the CV file. Please check system permissions."
        else:
            user_message = "An unexpected error occurred during CV generation. Please try again."
        
        return JSONResponse({
            "status": "error", 
            "message": user_message,
            "technical_details": error_msg if "demo" not in user_message else None
        }, status_code=500)

@app.websocket("/ws/progress/{session_id}")
async def websocket_progress(websocket: WebSocket, session_id: str):
    """WebSocket endpoint for real-time progress updates"""
    await manager.connect(websocket, session_id)
    
    try:
        # Send initial connection message
        await manager.send_progress(websocket, "Connected", 0, {"session_id": session_id})
        
        # Wait for messages or simulate progress
        while True:
            try:
                # Listen for any incoming messages (optional)
                data = await asyncio.wait_for(websocket.receive_text(), timeout=1.0)
                message = json.loads(data)
                
                if message.get("action") == "start_generation":
                    # Start progress simulation
                    for status, progress in progress_steps:
                        await manager.send_progress(websocket, status, progress)
                        await asyncio.sleep(1.5)  # Simulate processing time
                        
                        if progress == 100:
                            # Send completion message with PDF URL
                            await manager.send_progress(
                                websocket, 
                                "Generation Complete!", 
                                100,
                                {
                                    "pdf_url": f"/static/outputs/sample_{session_id}.pdf",
                                    "download_ready": True
                                }
                            )
                            break
                    
            except asyncio.TimeoutError:
                # No message received, keep connection alive
                continue
            except json.JSONDecodeError:
                await manager.send_progress(websocket, "Invalid message format", 0, {"error": True})
                
    except WebSocketDisconnect:
        print(f"WebSocket disconnected for session: {session_id}")
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        manager.disconnect(websocket)

@app.get("/api/templates")
async def get_templates():
    """Get available CV templates"""
    templates_info = [
        {
            "id": "classic_cv.html",
            "name": "Classic",
            "description": "Traditional professional format",
            "color": "blue"
        },
        {
            "id": "modern_cv.html", 
            "name": "Modern",
            "description": "Contemporary design with accents",
            "color": "emerald"
        },
        {
            "id": "executive_cv.html",
            "name": "Executive",
            "description": "Premium layout for senior roles", 
            "color": "purple"
        }
    ]
    return JSONResponse(templates_info)

@app.get("/api/session/{session_id}/messages")
async def get_session_messages(session_id: str):
    """Get chat messages for a session"""
    if session_id in manager.session_data:
        return JSONResponse(manager.session_data[session_id]["messages"])
    return JSONResponse([])

@app.get("/api/test/websocket")
async def test_websocket_endpoint():
    """Test endpoint to verify WebSocket functionality"""
    return JSONResponse({
        "status": "ready",
        "websocket_url": "/ws/progress/{session_id}",
        "active_connections": len(manager.active_connections),
        "active_sessions": len(manager.session_data),
        "message": "WebSocket endpoint is ready for connections"
    })

@app.post("/api/session/{session_id}/template")
async def update_session_template(session_id: str, template: str = Form(...)):
    """Update template for a session"""
    if session_id not in manager.session_data:
        manager.session_data[session_id] = {
            "messages": [],
            "template": template,
            "status": "idle"
        }
    else:
        manager.session_data[session_id]["template"] = template
    
    return JSONResponse({
        "status": "success",
        "template": template,
        "session_id": session_id
    })

@app.get("/static/outputs/{filename}")
async def serve_pdf(filename: str):
    """Serve generated PDF files"""
    file_path = Path("static/outputs") / filename
    if file_path.exists():
        return FileResponse(
            path=file_path,
            media_type='application/pdf',
            filename=filename
        )
    raise HTTPException(status_code=404, detail="File not found")

if __name__ == "__main__":
    import uvicorn
    print("Starting Rolevate CV Generator...")
    print("Access the application at: http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)