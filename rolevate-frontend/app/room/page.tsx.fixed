"use client";

import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import { Room, RoomEvent } from "livekit-client";
import { RoomContext } from "@livekit/components-react";
import { InterviewerAvatar } from "@/components/interview/InterviewerAvatar";
import Link from "next/link";

export default function RoomPage() {
  const searchParams = useSearchParams();
  const phone = searchParams.get("phone");
  const [room] = useState(() => new Room());

  const [isCallActive, setIsCallActive] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [interviewStatus, setInterviewStatus] = useState<"ready" | "connecting" | "active" | "completed">("ready");

  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (isCallActive) {
      timer = setInterval(() => {
        setCallDuration((prev) => prev + 1);
      }, 1000);
    }
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [isCallActive]);

  useEffect(() => {
    const handleError = (error: Error) => {
      console.error("LiveKit Error:", error);
      alert("Audio/Video permissions issue or server error");
    };
    room.on(RoomEvent.MediaDevicesError, handleError);
    return () => {
      room.off(RoomEvent.MediaDevicesError, handleError);
    };
  }, [room]);

  const startInterview = async () => {
    setInterviewStatus("connecting");
    try {
      const response = await fetch(`/api/livekit-token?phone=${phone}`);
      const data = await response.json();
      const livekitUrl = process.env.NEXT_PUBLIC_LIVEKIT_URL;
      
      if (!livekitUrl) {
        throw new Error("LiveKit URL is not defined");
      }
      
      await room.connect(livekitUrl, data.token);
      await room.localParticipant.setMicrophoneEnabled(true);
      setIsCallActive(true);
      setInterviewStatus("active");
    } catch (err) {
      console.error(err);
      setInterviewStatus("ready");
    }
  };

  const toggleMute = () => setIsMuted(!isMuted);
  
  const formatTime = (s: number): string => {
    return `${Math.floor(s / 60)}:${("0" + (s % 60)).slice(-2)}`;
  };

  if (!phone) {
    return (
      <div className="min-h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <p className="text-xl font-semibold">Invalid Interview Link</p>
          <Link href="/" className="text-blue-400 underline">
            Back to Home
          </Link>
        </div>
      </div>
    );
  }

  return (
    <RoomContext.Provider value={room}>
      <div className="min-h-screen bg-slate-900 text-white p-6">
        <div className="max-w-3xl mx-auto space-y-6">
          <header className="flex justify-between items-center">
            <h1 className="text-2xl font-bold">Interview Session</h1>
            {isCallActive && (
              <div className="text-sm bg-red-500 px-3 py-1 rounded-full animate-pulse">
                {formatTime(callDuration)}
              </div>
            )}
          </header>

          <div className="bg-slate-800 p-6 rounded-lg shadow-lg space-y-6">
            <div className="text-sm flex justify-between">
              <span>Laila (AI Interviewer)</span>
              <span>{interviewStatus.toUpperCase()}</span>
            </div>
            <div className="flex justify-center">
              <InterviewerAvatar isSpeaking={false} isActive={isCallActive} />
            </div>

            <div className="flex justify-center gap-4 mt-4">
              {interviewStatus === "ready" && (
                <button
                  className="bg-green-500 px-6 py-2 rounded hover:bg-green-600"
                  onClick={startInterview}
                >
                  Start Interview
                </button>
              )}
              {interviewStatus === "active" && (
                <button
                  className="bg-red-500 px-6 py-2 rounded hover:bg-red-600"
                  onClick={() => setInterviewStatus("completed")}
                >
                  End Interview
                </button>
              )}
              {interviewStatus === "completed" && (
                <Link href="/" className="text-blue-400 underline">
                  Return to Home
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>
    </RoomContext.Provider>
  );
}
