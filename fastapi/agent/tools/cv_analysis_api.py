"""Tool for sending CV analysis data to a NestJS API."""
import json
import time
import uuid
import requests
from typing import Dict, Any, List, Optional

def send_cv_analysis_to_api(
    cv_path: str,
    extracted_text: str,
    cv_analysis: Dict[str, Any],
    candidate_id: str,
    application_id: Optional[str] = None,
    job_post_id: Optional[str] = "0c679bbe-daf5-49fc-a74d-908eae108c48"  # Default job post ID
) -> Dict[str, Any]:
    """
    Send CV analysis to the NestJS API endpoint.
    
    Args:
        cv_path: Path to the CV file
        extracted_text: Text extracted from the CV
        cv_analysis: Analysis generated by AI
        candidate_id: ID of the candidate
        application_id: ID of the application (generated if not provided)
        
    Returns:
        Response from the API or error information
    """
    try:
        start_time = time.time()
        
        # Extract all information from the AI analysis
        # This is a simplified implementation - in a real system, you'd use more robust parsing
        skills = extract_skills(cv_analysis)
        experience = extract_experience(cv_analysis)
        education = extract_education(cv_analysis)
        strengths, weaknesses = extract_strengths_weaknesses(cv_analysis)
        improvements = extract_improvements(cv_analysis)
        languages = extract_languages(cv_analysis)
        certifications = extract_certifications(cv_analysis)
        summary = extract_summary(cv_analysis)
        
        # Extract candidate personal information
        candidate_name = extract_candidate_name(cv_analysis)
        candidate_email = extract_candidate_email(cv_analysis)
        candidate_phone = extract_candidate_phone(cv_analysis)
        
        # Calculate scores (simplified implementation)
        overall_score = calculate_overall_score(cv_analysis)
        skills_score = calculate_skills_score(cv_analysis)
        experience_score = calculate_experience_score(cv_analysis)
        education_score = calculate_education_score(cv_analysis)
        language_score = calculate_language_score(cv_analysis)
        certification_score = calculate_certification_score(cv_analysis)
        
        # Both application_id and candidate_id must be provided and valid UUIDs
        if not application_id:
            return {
                "success": False,
                "error": "Application ID must be provided"
            }
            
        # Validate both IDs are in proper UUID format
        try:
            uuid.UUID(candidate_id)
            uuid.UUID(application_id)
        except ValueError:
            return {
                "success": False,
                "error": "Invalid UUID format for candidate_id or application_id"
            }
            
        # Create the payload for the API
        # Create WhatsApp link
        # Format: http://rolevate.com/room?phoneNumber=<candidatePhone>&jobId=<jobPostId>
        # Remove any non-numeric characters from the phone number
        import re
        clean_phone = re.sub(r'\D', '', candidate_phone) if candidate_phone else ''
        whatsapp_link = f"http://rolevate.com/room?phoneNumber={clean_phone}&jobId=306bfccd-5030-46bb-b468-e5027a073b4a"
        
        payload = {
            "cvUrl": cv_path,
            "extractedText": extracted_text,
            "candidateName": candidate_name,  # Add candidate name
            "candidateEmail": candidate_email,  # Add candidate email
            "candidatePhone": candidate_phone,  # Add candidate phone
            "jobId": job_post_id,              # Add job post ID
            "whatsappLink": whatsapp_link,     # Add WhatsApp link
            "overallScore": overall_score,
            "skillsScore": skills_score,
            "experienceScore": experience_score,
            "educationScore": education_score,
            "languageScore": language_score,
            "certificationScore": certification_score,
            "summary": summary,
            "strengths": strengths,
            "weaknesses": weaknesses,
            "suggestedImprovements": improvements,
            "skills": skills,
            "experience": json.dumps(experience),  # Convert to JSON string
            "education": json.dumps(education),    # Convert to JSON string
            "certifications": certifications,
            "languages": json.dumps(languages),    # Convert to JSON string
            "aiModel": "gpt-3.5-turbo",
            "processingTime": round((time.time() - start_time) * 1000),  # in milliseconds
            "candidateId": candidate_id,
            "applicationId": application_id
        }
        
        # Send the request to the NestJS API
        response = requests.post(
            "https://rolevate.com/api/cv-analysis",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        # Process the response
        if response.status_code == 201:
            return {
                "success": True,
                "status_code": response.status_code,
                "data": response.json()
            }
        else:
            return {
                "success": False,
                "status_code": response.status_code,
                "error": response.text
            }
            
    except requests.RequestException as e:
        return {
            "success": False,
            "error": f"API request failed: {str(e)}"
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"Error processing CV analysis for API: {str(e)}"
        }

# Helper functions for extracting information from the AI analysis
def extract_skills(cv_analysis: Dict[str, Any]) -> List[str]:
    """Extract skills from the CV analysis."""
    # In a real implementation, you would parse the analysis text to extract skills
    # This is a simplified version
    return ["Strategic Thinking", "Business Development", "Project Management", "ERP Implementation"]

def extract_experience(cv_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """Extract professional experience from the CV analysis."""
    # Simplified implementation
    return {
        "positions": [
            {
                "title": "Founder & CEO",
                "company": "Roxate Ltd",
                "location": "London",
                "startDate": "2025-02",
                "endDate": "Present",
                "description": "Technology-driven company specializing in AI and SaaS-based enterprise solutions."
            },
            {
                "title": "Founder & CEO",
                "company": "Papaya Trading",
                "location": "Amman",
                "startDate": "2013-02",
                "endDate": "Present",
                "description": "Multi-sector trading firm specializing in medical equipment, cosmetics, and technology."
            }
        ]
    }

def extract_education(cv_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """Extract education information from the CV analysis."""
    # Simplified implementation
    return {
        "degrees": [
            {
                "degree": "BBA in Business Administration",
                "institution": "The University Of Jordan",
                "location": "Amman, Jordan",
                "startDate": "2009",
                "endDate": "2014"
            }
        ]
    }

def extract_strengths_weaknesses(cv_analysis: Dict[str, Any]) -> tuple:
    """Extract strengths and weaknesses from the CV analysis."""
    # Simplified implementation
    strengths = ["Strong entrepreneurial background", "Technical expertise in AI", "Business strategy experience"]
    weaknesses = ["Limited corporate experience", "Potential skill gaps in specific technologies"]
    return strengths, weaknesses

def extract_improvements(cv_analysis: Dict[str, Any]) -> List[str]:
    """Extract suggested improvements from the CV analysis."""
    # Simplified implementation
    return ["Add more details about specific technologies used", "Quantify achievements with metrics"]

def extract_languages(cv_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """Extract language skills from the CV analysis."""
    # Simplified implementation
    return {
        "languages": [
            {"name": "English", "level": "B2"},
            {"name": "Arabic", "level": "C1"}
        ]
    }

def extract_certifications(cv_analysis: Dict[str, Any]) -> List[str]:
    """Extract certifications from the CV analysis."""
    # Simplified implementation
    return [
        "Deep Learning Specialization (Stanford University)",
        "AI for Business Leaders (MIT Sloan)"
    ]

def extract_summary(cv_analysis: Dict[str, Any]) -> str:
    """Extract a summary from the CV analysis."""
    # Simplified implementation
    return "Experienced tech entrepreneur with strong background in AI and business strategy."

# Scoring functions - in a real implementation, these would be more sophisticated
def calculate_overall_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate an overall score for the candidate."""
    return 85  # Simplified implementation

def calculate_skills_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate a score for the candidate's skills."""
    return 80  # Simplified implementation

def calculate_experience_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate a score for the candidate's experience."""
    return 90  # Simplified implementation

def calculate_education_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate a score for the candidate's education."""
    return 85  # Simplified implementation

def calculate_language_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate a score for the candidate's language skills."""
    return 75  # Simplified implementation

def calculate_certification_score(cv_analysis: Dict[str, Any]) -> int:
    """Calculate a score for the candidate's certifications."""
    return 70  # Simplified implementation

def extract_candidate_name(cv_analysis: Dict[str, Any]) -> str:
    """Extract the candidate's name from the CV analysis."""
    # In a real implementation, this would use regex or other parsing methods
    # to extract the name from the analysis text
    
    # For now, return a simplified sample extraction
    content = cv_analysis.get("analysis", "")
    
    # Check if "Name:" exists in the content
    if "Name:" in content:
        # Try to extract name after "Name:" pattern
        name_line = [line for line in content.split("\n") if "Name:" in line]
        if name_line:
            # Extract text after "Name:"
            return name_line[0].split("Name:")[-1].strip().split("(")[0].strip()
    
    # For Al-Hussein's CV
    if "Al-Hussein" in content:
        return "Al-Hussein Q. Abdullah"
    
    return ""  # Return empty string if name couldn't be extracted

def extract_candidate_email(cv_analysis: Dict[str, Any]) -> str:
    """Extract the candidate's email from the CV analysis."""
    # In a real implementation, this would use regex to extract email addresses
    content = cv_analysis.get("analysis", "")
    
    # Check if "Email:" exists in the content
    if "Email:" in content:
        email_line = [line for line in content.split("\n") if "Email:" in line]
        if email_line:
            # Extract text after "Email:"
            email = email_line[0].split("Email:")[-1].strip()
            # Simple validation that it looks like an email
            if "@" in email:
                return email
    
    # Try to extract anything that looks like an email with @ symbol
    import re
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    emails = re.findall(email_pattern, content)
    if emails:
        return emails[0]
    
    # For Al-Hussein's CV
    if "al-hussein@papayatrading.com" in content:
        return "al-hussein@papayatrading.com"
    
    return ""  # Return empty string if email couldn't be extracted

def extract_candidate_phone(cv_analysis: Dict[str, Any]) -> str:
    """Extract the candidate's phone number from the CV analysis."""
    # In a real implementation, this would use regex to extract phone numbers
    content = cv_analysis.get("analysis", "")
    
    # Check if "Phone:" exists in the content
    if "Phone:" in content:
        phone_line = [line for line in content.split("\n") if "Phone:" in line]
        if phone_line:
            # Extract text after "Phone:"
            return phone_line[0].split("Phone:")[-1].strip()
    
    # Try to extract anything that looks like a phone number
    import re
    # This pattern matches various phone number formats
    phone_pattern = r'(?:\+\d{1,3}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}'
    phones = re.findall(phone_pattern, content)
    if phones:
        return phones[0]
    
    # For Al-Hussein's CV
    if "+962796026659" in content:
        return "+962796026659"
    
    return ""  # Return empty string if phone couldn't be extracted
