// =======================================
// SECURITY AUDIT LOGS
// =======================================

model SecurityLog {
  id            String   @id @default(cuid())
  type          String // AUTH_FAILURE, UNAUTHORIZED_ACCESS, etc.
  userId        String?
  ipHash        String // Hashed IP for privacy
  userAgentHash String? // Hashed user agent
  details       Json // Additional event details
  severity      String // LOW, MEDIUM, HIGH, CRITICAL
  createdAt     DateTime @default(now())

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@index([userId, createdAt])
  @@map("security_logs")
}

// =======================================
// LIVEKIT ROOM
// =======================================

model LiveKitRoom {
  id        String   @id @default(cuid())
  name      String   @unique
  metadata  Json?
  createdBy String? // User ID or system
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  FREE
  PRO
  ENTERPRISE
}

enum Industry {
  TECHNOLOGY
  HEALTHCARE
  FINANCE
  EDUCATION
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  TRANSPORTATION
  HOSPITALITY
  CONSULTING
  MARKETING
  REAL_ESTATE
  MEDIA
  AGRICULTURE
  ENERGY
  GOVERNMENT
  NON_PROFIT
  OTHER
}

enum Country {
  AE // United Arab Emirates
  SA // Saudi Arabia
  QA // Qatar
  KW // Kuwait
  BH // Bahrain
  OM // Oman
  EG // Egypt
  JO // Jordan
  LB // Lebanon
  SY // Syria
  IQ // Iraq
  YE // Yemen
  MA // Morocco
  TN // Tunisia
  DZ // Algeria
  LY // Libya
  SD // Sudan
  SO // Somalia
  DJ // Djibouti
  KM // Comoros
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================
// ENUMS
// =======================================

enum UserType {
  SYSTEM
  COMPANY
  CANDIDATE
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum TokenType {
  REFRESH
}

enum CVStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  ERROR
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFERED
  REJECTED
  WITHDRAWN
}

enum NotificationType {
  SUCCESS
  WARNING
  INFO
  ERROR
}

enum NotificationCategory {
  APPLICATION
  INTERVIEW
  SYSTEM
  CANDIDATE
  OFFER
}

// =======================================
// USER MANAGEMENT
// =======================================

model User {
  id               String            @id @default(cuid())
  userType         UserType
  password         String?
  email            String?           @unique
  name             String?
  phone            String? // User phone number
  avatar           String? // Path to user avatar image
  isActive         Boolean           @default(true)
  companyId        String?
  company          Company?          @relation(fields: [companyId], references: [id])
  refreshTokens    RefreshToken[]
  candidateProfile CandidateProfile? // One-to-one relationship with candidate profile
  applicationNotes ApplicationNote[]
  notifications    Notification[]
  
  // Reporting System Relations
  reports          Report[]          @relation("ReportUser")
  createdTemplates ReportTemplate[]  @relation("TemplateCreator") 
  sharedReports    ReportShare[]     @relation("ReportSharer")
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userType])
  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

// =======================================
// NOTIFICATION MANAGEMENT
// =======================================

model Notification {
  id        String               @id @default(cuid())
  type      NotificationType
  category  NotificationCategory
  title     String
  message   String               @db.Text
  timestamp DateTime             @default(now())
  read      Boolean              @default(false)
  actionUrl String?
  metadata  Json?
  userId    String?
  user      User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String?
  company   Company?             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([userId, read])
  @@index([companyId, read])
  @@index([category, timestamp])
  @@index([type, timestamp])
  @@index([userId, timestamp]) // Index for user notification history
  @@index([companyId, timestamp]) // Index for company notification history
  @@map("notifications")
}

// =======================================
// COMPANY MANAGEMENT
// =======================================

model Address {
  id        String   @id @default(cuid())
  street    String?
  city      String?
  country   Country
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Company {
  id                String           @id @default(cuid())
  name              String
  spelling          String?          // Optional: How the company name should be pronounced/spelled
  description       String?          @db.Text
  email             String?
  phone             String?
  website           String?
  logo              String? // Path to company logo image
  industry          Industry?
  numberOfEmployees Int?
  address           Address?
  users             User[]
  jobs              Job[] // Add jobs relationship
  interviews        Interview[]
  invitations       Invitation[]
  notifications     Notification[]
  communications    Communication[]
  
  // Reporting System Relations
  reports           Report[]         @relation("CompanyReport")
  reportTemplates   ReportTemplate[] @relation("CompanyTemplate")
  
  subscription      SubscriptionType @default(FREE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("companies")
}

model Invitation {
  id        String           @id @default(cuid())
  code      String           @unique
  email     String?
  status    InvitationStatus @default(PENDING)
  companyId String
  company   Company          @relation(fields: [companyId], references: [id])
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([code])
  @@index([companyId])
  @@map("invitations")
}

// =======================================
// JOB MANAGEMENT
// =======================================

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum JobLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum WorkType {
  ONSITE
  REMOTE
  HYBRID
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  EXPIRED
  DELETED
}

model Job {
  id                 String    @id @default(cuid())
  title              String
  department         String
  location           String
  salary             String
  type               JobType
  deadline           DateTime
  description        String    @db.Text
  shortDescription   String    @db.Text
  responsibilities   String    @db.Text
  requirements       String    @db.Text
  benefits           String    @db.Text
  skills             String[] // Array of skill strings
  experience         String
  education          String
  jobLevel           JobLevel
  workType           WorkType
  industry           String
  companyDescription String    @db.Text
  status             JobStatus @default(DRAFT)

  // Company relationship
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Applications
  applications Application[]

  // Interviews
  interviews Interview[]

  // Communications
  communications Communication[]

  // AI prompts for analysis (optional)
  cvAnalysisPrompt        String? @db.Text
  interviewPrompt         String? @db.Text
  aiSecondInterviewPrompt String? @db.Text

  // Interview Settings
  interviewLanguage String @default("english")

  // Metadata
  featured   Boolean  @default(false)
  applicants Int      @default(0)
  views      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
  @@index([status])
  @@index([type])
  @@index([jobLevel])
  @@index([industry])
  @@index([featured])
  @@index([status, deadline]) // Composite index for public job queries
  @@index([featured, status, deadline]) // Composite index for featured jobs
  @@index([createdAt]) // Index for ordering
  @@index([title]) // Index for job title searches
  @@index([description]) // Index for job description searches
  @@index([location]) // Index for location-based searches
  @@index([department]) // Index for department searches
  @@index([skills]) // Index for skills array searches
  @@map("jobs")
}

// =======================================
// CANDIDATE MANAGEMENT
// =======================================

enum ExperienceLevel {
  FRESH_GRADUATE
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  PHD
  PROFESSIONAL_CERTIFICATION
}

model CandidateProfile {
  id String @id @default(cuid())

  // Basic Information
  firstName       String
  lastName        String
  email           String    @unique
  phone           String?
  dateOfBirth     DateTime?
  nationality     Country?
  currentLocation String?

  // Professional Information
  currentJobTitle String?
  currentCompany  String?
  experienceLevel ExperienceLevel?
  totalExperience Int? // Years of experience
  expectedSalary  String?
  noticePeriod    String? // e.g., "30 days", "Immediate"

  // Education
  highestEducation EducationLevel?
  fieldOfStudy     String?
  university       String?
  graduationYear   Int?

  // Skills and Preferences
  skills              String[] // Array of skills
  preferredJobTypes   JobType[] // Preferred job types
  preferredWorkType   WorkType? // Preferred work arrangement
  preferredIndustries Industry[] // Preferred industries
  preferredLocations  String[] // Preferred work locations

  // Saved Jobs
  savedJobs String[] // Array of saved job IDs

  // Documents
  resumeUrl    String? // URL to uploaded resume
  portfolioUrl String? // Portfolio website
  linkedInUrl  String?
  githubUrl    String?

  // Profile Settings
  isProfilePublic Boolean @default(true)
  isOpenToWork    Boolean @default(true)
  profileSummary  String? @db.Text

  // User relationship
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Applications
  applications Application[]

  // Interviews
  interviews Interview[]

  // CVs
  cvs CV[]

  // Communications
  communications Communication[]

  // Work Experience
  workExperiences WorkExperience[]

  // Education History
  educationHistory Education[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([experienceLevel])
  @@index([isOpenToWork])
  @@index([currentLocation])
  @@index([skills]) // Index for skills array searches
  @@index([preferredIndustries]) // Index for industry preferences
  @@index([preferredLocations]) // Index for location preferences
  @@index([isOpenToWork, experienceLevel]) // Composite index for candidate search
  @@index([currentLocation, isOpenToWork]) // Composite index for location-based search
  @@map("candidate_profiles")
}

model WorkExperience {
  id          String    @id @default(cuid())
  jobTitle    String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime? // Null if current job
  isCurrent   Boolean   @default(false)
  description String?   @db.Text

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("work_experiences")
}

model Education {
  id           String    @id @default(cuid())
  degree       String // e.g., "Bachelor of Computer Science"
  institution  String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime? // Null if ongoing
  isCurrent    Boolean   @default(false)
  grade        String? // GPA, percentage, etc.
  description  String?   @db.Text

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("education_history")
}

model CV {
  id               String   @id @default(cuid())
  fileName         String
  originalFileName String?
  fileUrl          String
  fileSize         Int? // File size in bytes
  mimeType         String? // e.g., "application/pdf"
  status           CVStatus @default(UPLOADED)
  isActive         Boolean  @default(true) // Only one CV can be active at a time
  extractedData    Json? // JSON object with extracted CV information

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  uploadedAt  DateTime  @default(now())
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([candidateId])
  @@index([status])
  @@index([isActive])
  @@map("cvs")
}

// =======================================
// APPLICATION MANAGEMENT
// =======================================

// =======================================
// WHATSAPP INTEGRATION
// =======================================

model WhatsAppMessage {
  id          String    @id @default(cuid())
  to          String // Recipient phone number (E.164 format)
  from        String // Your WhatsApp business number
  messageId   String // WhatsApp API message ID
  status      String // sent, delivered, read, failed, etc.
  direction   String // 'inbound' or 'outbound'
  type        String // text, image, template, etc.
  content     String? // Message text or template name
  mediaUrl    String? // If media message
  error       String? // Error message if failed
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([to])
  @@index([from])
  @@index([status])
}

model Application {
  id     String            @id @default(cuid())
  status ApplicationStatus @default(SUBMITTED)

  // Job and Candidate
  jobId       String
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  // Application Details
  coverLetter    String? @db.Text
  resumeUrl      String? // Specific resume for this application
  expectedSalary String?
  noticePeriod   String?

  // AI CV Analysis Results
  cvAnalysisScore   Float?    @db.DoublePrecision // AI-generated score (0-100)
  cvAnalysisResults Json? // Detailed analysis results
  analyzedAt        DateTime? // When the CV was analyzed

  // AI Recommendations
  aiCvRecommendations              String?   @db.Text // AI recommendations for CV improvement
  aiInterviewRecommendations       String?   @db.Text // AI recommendations for first interview preparation
  aiSecondInterviewRecommendations String?   @db.Text // AI recommendations for second interview preparation
  recommendationsGeneratedAt       DateTime? // When recommendations were generated

  // Company Notes (internal)
  companyNotes String? @db.Text

  // Notes (HR, AI, System, Activity Log)
  notes ApplicationNote[]

  // Timeline
  appliedAt            DateTime  @default(now())
  reviewedAt           DateTime?
  interviewScheduledAt DateTime?
  interviewedAt        DateTime?
  rejectedAt           DateTime?
  acceptedAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, candidateId]) // Prevent duplicate applications
  @@index([jobId])
  @@index([candidateId])
  @@index([status])
  @@index([jobId, status]) // Composite index for job applications by status
  @@index([candidateId, status]) // Composite index for candidate applications by status
  @@index([appliedAt]) // Index for chronological ordering
  @@map("applications")
}

model ApplicationNote {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  text          String      @db.Text
  createdAt     DateTime    @default(now())
  source        NoteSource  @default(USER)
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
}

enum NoteSource {
  USER
  AI
  SYSTEM
}

// =======================================
// COMMUNICATION SYSTEM
// =======================================

enum CommunicationType {
  WHATSAPP
  EMAIL
  PHONE
  SMS
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

// =======================================
// AVAILABLE CANDIDATE CV (JobFit Feature)
// =======================================

model AvailableCandidate {
  id String @id @default(cuid())

  // Personal Information
  firstName String
  lastName  String
  email     String? @unique
  phone     String?

  // CV Information
  cvUrl      String
  cvFileName String

  // Professional Information
  currentJobTitle String?
  currentCompany  String?
  totalExperience Int      @default(0)
  skills          String[]
  education       String?
  location        String?

  // Additional Information
  expectedSalary     String?
  profileSummary     String?  @db.Text
  keyStrengths       String[]
  industryExperience String[]

  // Status
  isActive     Boolean @default(true)
  isOpenToWork Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive, isOpenToWork])
  @@index([currentJobTitle])
  @@index([totalExperience])
  @@index([createdAt])
  @@map("available_candidates")
}

// =======================================
// INTERVIEW MANAGEMENT
// =======================================

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum InterviewType {
  FIRST_ROUND
  SECOND_ROUND
  TECHNICAL
  HR
  FINAL
}

model Interview {
  id String @id @default(cuid())

  // Relationships
  jobId       String
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Interview Details
  title       String
  description String?         @db.Text
  type        InterviewType   @default(FIRST_ROUND)
  status      InterviewStatus @default(SCHEDULED)

  // Scheduling
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  duration    Int? // Duration in minutes

  // Video Conference
  roomId       String? // LiveKit room ID
  videoLink    String? // Direct video conference link
  recordingUrl String? // URL to recorded interview

  // AI Analysis
  aiAnalysis       Json? // AI analysis of the interview
  aiScore          Float?    @db.DoublePrecision // AI-generated score (0-100)
  aiRecommendation String?   @db.Text // AI recommendation for hiring decision
  analyzedAt       DateTime? // When AI analysis was completed

  // Interview Results
  interviewerNotes  String? @db.Text // Notes from interviewer
  candidateFeedback String? @db.Text // Feedback from candidate
  overallRating     Int? // 1-5 scale rating

  // Technical Assessment (if applicable)
  technicalQuestions Json? // Array of technical questions asked
  technicalAnswers   Json? // Candidate's answers with scores

  // Interview Transcripts
  transcripts Transcript[]

  // Metadata
  metadata Json? // Additional interview data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobId])
  @@index([candidateId])
  @@index([companyId])
  @@index([roomId])
  @@index([status])
  @@index([scheduledAt])
  @@index([type])
  @@index([jobId, status]) // Composite index for job interviews by status
  @@index([candidateId, scheduledAt]) // Index for candidate interview schedule
  @@index([companyId, scheduledAt]) // Index for company interview schedule
  @@map("interviews")
}

enum SpeakerType {
  INTERVIEWER
  CANDIDATE
  SYSTEM
  AI_ASSISTANT
}

model Transcript {
  id String @id @default(cuid())

  // Relationship
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  // Speaker Information
  speakerType SpeakerType
  speakerName String? // Name of the speaker (optional)
  speakerId   String? // ID of the speaker (user ID, participant ID, etc.)

  // Transcript Content
  content    String  @db.Text // The actual spoken text
  confidence Float?  @db.DoublePrecision // Speech-to-text confidence score (0-1)
  language   String? @default("en") // Language code (e.g., "en", "ar")

  // Timing Information
  startTime Float // Start time in seconds from interview start
  endTime   Float // End time in seconds from interview start
  duration  Float // Duration of this speech segment in seconds

  // AI Analysis
  sentiment  String? // POSITIVE, NEGATIVE, NEUTRAL
  keywords   String[] // Key topics/words extracted from this segment
  aiSummary  String?  @db.Text // AI-generated summary of this segment
  importance Int?     @default(1) // Importance score 1-5 (5 being most important)

  // Metadata
  sequenceNumber Int // Order of this transcript in the interview
  metadata       Json? // Additional data (emotions, technical terms, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([interviewId])
  @@index([speakerType])
  @@index([startTime])
  @@index([sequenceNumber])
  @@index([sentiment])
  @@map("transcripts")
}

model Communication {
  id String @id @default(cuid())

  // Relationships
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)

  // Communication Details
  type      CommunicationType
  direction CommunicationDirection
  status    CommunicationStatus    @default(SENT)

  content String  @db.Text
  subject String? // For emails

  // External IDs for tracking
  whatsappId String? // WhatsApp message ID
  emailId    String? // Email service ID

  // Metadata
  phoneNumber String? // WhatsApp phone number used
  metadata    Json? // Additional data

  // Timestamps
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  failedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, candidateId])
  @@index([companyId, type])
  @@index([sentAt])
  @@index([candidateId, sentAt]) // Index for candidate communication history
  @@index([companyId, sentAt]) // Index for company communication history
  @@map("communications")
}

// =======================================
// COMPREHENSIVE REPORTING SYSTEM
// =======================================

// Report Types and Categories
enum ReportType {
  ANALYTICS      // Data analytics and insights
  PERFORMANCE    // Performance metrics and KPIs
  COMPLIANCE     // Compliance and audit reports
  OPERATIONAL    // Operational reports
  FINANCIAL      // Financial and billing reports
  SUMMARY        // Executive summaries
  DETAILED       // Detailed transactional reports
  CUSTOM         // Custom user-defined reports
}

enum ReportCategory {
  // HR & Recruitment
  RECRUITMENT_METRICS
  CANDIDATE_PIPELINE
  INTERVIEW_ANALYTICS
  HIRING_FUNNEL
  TIME_TO_HIRE
  COST_PER_HIRE
  SOURCE_EFFECTIVENESS
  
  // Company Management
  COMPANY_OVERVIEW
  DEPARTMENT_ANALYTICS
  EMPLOYEE_METRICS
  SUBSCRIPTION_USAGE
  
  // Job Management
  JOB_PERFORMANCE
  APPLICATION_TRENDS
  JOB_ANALYTICS
  MARKET_ANALYSIS
  
  // Communication
  COMMUNICATION_METRICS
  ENGAGEMENT_ANALYTICS
  RESPONSE_RATES
  
  // System & Security
  USER_ACTIVITY
  SYSTEM_PERFORMANCE
  SECURITY_AUDIT
  ERROR_ANALYTICS
  
  // Financial
  BILLING_SUMMARY
  REVENUE_ANALYTICS
  COST_ANALYSIS
  
  // Custom
  CUSTOM_ANALYTICS
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
  HTML
  DASHBOARD // Interactive web dashboard
}

enum ReportStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  SCHEDULED
  ARCHIVED
}

enum ReportScope {
  GLOBAL      // System-wide reports (admin only)
  COMPANY     // Company-specific reports
  DEPARTMENT  // Department-specific reports
  USER        // User-specific reports
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SharePermission {
  VIEW_ONLY
  DOWNLOAD
  EDIT
  FULL_ACCESS
}

enum ScheduleFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM // Uses cron expression
}

enum ReportDataSource {
  APPLICATIONS     // From applications table
  CANDIDATES      // From candidate_profiles table
  JOBS           // From jobs table
  INTERVIEWS     // From interviews table
  USERS          // From users table
  COMPANIES      // From companies table
  COMMUNICATIONS // From communications table
  SECURITY_LOGS  // From security_logs table
  CUSTOM_QUERY   // Custom SQL query
  MIXED          // Multiple data sources
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  TIMEOUT
}

// Main Report Model
model Report {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255) // Enforce length limit
  description String?      @db.Text
  type        ReportType
  category    ReportCategory
  format      ReportFormat @default(PDF)
  status      ReportStatus @default(DRAFT)
  scope       ReportScope  @default(COMPANY)
  priority    ReportPriority @default(MEDIUM)
  
  // Content and Configuration
  query       String?      @db.Text // SQL query or configuration
  dataSource  ReportDataSource @default(MIXED) // Source of report data
  filters     Json?        // Report filters configuration
  parameters  Json?        // Report parameters
  config      Json?        // Additional configuration
  
  // Execution Control
  executionStatus ExecutionStatus @default(PENDING)
  maxExecutionTime Int?     @default(600) // Max execution time in seconds
  timeoutAt    DateTime?   // When execution will timeout
  
  // Results and Output
  data        Json?        // Generated report data
  fileUrl     String?      // URL to generated report file
  fileName    String?      @db.VarChar(255) // Generated file name
  fileSize    Int?         // File size in bytes
  fileMimeType String?     @db.VarChar(100) // MIME type of generated file
  
  // Metrics and Performance
  metrics     ReportMetrics[]
  
  // Relationships
  templateId  String?
  template    ReportTemplate? @relation(fields: [templateId], references: [id])
  
  companyId   String?
  company     Company?        @relation("CompanyReport", fields: [companyId], references: [id], onDelete: Cascade)
  
  userId      String?
  user        User?           @relation("ReportUser", fields: [userId], references: [id], onDelete: SetNull)
  
  // Scheduling
  schedule    ReportSchedule?
  
  // Sharing
  shares      ReportShare[]
  
  // Audit Trail
  generatedBy String?      // User ID who generated the report
  generatedAt DateTime?    // When the report was generated
  
  // Performance Tracking
  executionTime Int?       // Execution time in milliseconds
  recordCount   Int?       // Number of records in the report
  
  // Data Retention and Cleanup
  expiresAt    DateTime?   // When the report data expires
  autoDelete   Boolean     @default(false) // Auto-delete after expiration
  
  // Access Control and Security
  isPublic     Boolean     @default(false)
  isArchived   Boolean     @default(false)
  archivedAt   DateTime?   // When the report was archived
  
  // Metadata
  tags         String[]    // Tags for categorization
  version      String      @default("1.0") @db.VarChar(10)
  checksum     String?     @db.VarChar(64) // File integrity checksum
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Business Rule Constraints
  @@unique([name, companyId]) // Unique report names per company
  
  @@index([companyId])
  @@index([userId])
  @@index([type, category])
  @@index([status])
  @@index([executionStatus])
  @@index([dataSource])
  @@index([createdAt])
  @@index([templateId])
  @@index([expiresAt]) // For cleanup jobs
  @@index([isArchived, archivedAt]) // For archive management
  @@index([companyId, category, status]) // Composite index for company reports
  @@index([companyId, isPublic, isArchived]) // For public report queries
  @@index([generatedAt]) // Index for report generation history
  @@index([tags]) // Index for tag-based searches
  @@index([timeoutAt]) // For timeout monitoring
  @@map("reports")
}

// Report Templates for Reusable Configurations
model ReportTemplate {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  description String?      @db.Text
  type        ReportType
  category    ReportCategory
  format      ReportFormat @default(PDF)
  scope       ReportScope  @default(COMPANY)
  dataSource  ReportDataSource @default(MIXED)
  
  // Template Configuration
  queryTemplate    String    @db.Text // Template query with placeholders
  defaultFilters   Json?     // Default filter configuration
  defaultParameters Json?    // Default parameters
  config           Json?     // Template configuration
  
  // Template Validation
  isValidated      Boolean   @default(false) // Whether template query is validated
  validatedAt      DateTime? // When template was last validated
  validationError  String?   @db.Text // Last validation error if any
  
  // Template Metadata
  version     String       @default("1.0") @db.VarChar(10)
  isSystem    Boolean      @default(false) // System-provided templates
  isActive    Boolean      @default(true)
  
  // Usage Tracking
  usageCount  Int          @default(0)
  lastUsed    DateTime?
  
  // Access Control
  isPublic    Boolean      @default(false) // Can be used by other companies
  
  // Relationships
  reports     Report[]
  
  companyId   String?
  company     Company?     @relation("CompanyTemplate", fields: [companyId], references: [id], onDelete: Cascade)
  
  createdBy   String?
  creator     User?        @relation("TemplateCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Business Rule Constraints
  @@unique([name, companyId]) // Unique template names per company
  @@unique([name, isSystem]) // System templates must have unique names globally
  
  @@index([companyId])
  @@index([type, category])
  @@index([dataSource])
  @@index([isSystem, isActive])
  @@index([isValidated])
  @@index([isPublic, isActive])
  @@index([createdBy])
  @@index([usageCount]) // For popular templates
  @@index([lastUsed]) // For recently used templates
  @@map("report_templates")
}

// Report Metrics for Performance Analysis
model ReportMetrics {
  id        String @id @default(cuid())
  
  reportId  String
  report    Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Metric Details
  metricName  String
  metricValue Float  @db.DoublePrecision
  metricType  String // COUNT, SUM, AVERAGE, PERCENTAGE, etc.
  
  // Dimensions
  dimension   String? // Category, department, time period, etc.
  period      String? // Time period for the metric
  
  // Metadata
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@index([reportId])
  @@index([metricName])
  @@index([reportId, metricName]) // Composite index for report metrics
  @@map("report_metrics")
}

// Report Scheduling for Automated Generation
model ReportSchedule {
  id        String            @id @default(cuid())
  
  reportId  String            @unique
  report    Report            @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Schedule Configuration
  frequency    ScheduleFrequency
  cronExpression String?        @db.VarChar(100) // For custom schedules
  
  // Schedule Timing
  startDate    DateTime
  endDate      DateTime?
  nextRun      DateTime?
  lastRun      DateTime?
  
  // Schedule Settings
  isActive     Boolean         @default(true)
  isPaused     Boolean         @default(false) // Temporary pause
  timezone     String          @default("UTC") @db.VarChar(50)
  
  // Recipients and Delivery
  recipients   String[]        // Email addresses or user IDs
  deliveryFormat ReportFormat  @default(PDF) // Format for scheduled delivery
  
  // Delivery Settings
  emailSubject String?         @db.VarChar(255)
  emailBody    String?         @db.Text
  includeAttachment Boolean    @default(true)
  
  // Execution Control
  maxExecutionTime Int?        @default(1800) // 30 minutes max for scheduled reports
  
  // Error Handling and Monitoring
  retryCount   Int             @default(0) // Current retry count
  maxRetries   Int             @default(3) // Maximum retry attempts
  consecutiveFailures Int      @default(0) // Track consecutive failures
  lastError    String?         @db.Text
  lastSuccessfulRun DateTime?  // Track last successful execution
  
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Business Rule Validation
  // Ensure cronExpression is provided when frequency is CUSTOM
  // This would be enforced at application level
  
  @@index([nextRun])
  @@index([isActive, isPaused])
  @@index([frequency])
  @@index([lastRun])
  @@index([consecutiveFailures])
  @@index([isActive, nextRun]) // For scheduler queries
  @@index([timezone]) // For timezone-based queries
  @@map("report_schedules")
}

// Report Sharing and Permissions
model ReportShare {
  id         String          @id @default(cuid())
  
  reportId   String
  report     Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Sharing Details
  sharedWith String?         @db.VarChar(255) // User ID or email
  permission SharePermission @default(VIEW_ONLY)
  
  // Access Control
  accessToken String?        @unique @db.VarChar(64) // For public sharing
  expiresAt   DateTime?      // Access expiration
  isRevoked   Boolean        @default(false) // Allow revoking access
  revokedAt   DateTime?      // When access was revoked
  
  // Usage Tracking and Limits
  accessCount    Int         @default(0)
  maxAccessCount Int?        // Limit number of accesses
  lastAccessed   DateTime?
  ipRestrictions String[]    // Allowed IP addresses/ranges
  
  // Sharing Settings
  isPublic     Boolean       @default(false)
  requireLogin Boolean       @default(true)
  allowDownload Boolean      @default(true) // Control download permission
  watermark    String?       @db.VarChar(255) // Add watermark to shared reports
  
  // Metadata
  sharedBy     String
  sharer       User          @relation("ReportSharer", fields: [sharedBy], references: [id], onDelete: Cascade)
  shareNote    String?       @db.Text // Note from sharer
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Business Rules
  @@unique([reportId, sharedWith]) // Prevent duplicate shares to same user
  
  @@index([reportId])
  @@index([sharedWith])
  @@index([accessToken])
  @@index([sharedBy])
  @@index([expiresAt])
  @@index([isRevoked])
  @@index([isPublic, isRevoked]) // For public share queries
  @@index([reportId, isRevoked]) // For active shares per report
  @@map("report_shares")
}

// Enhanced Audit Actions Enum
enum AuditAction {
  CREATED
  UPDATED  
  DELETED
  GENERATED
  ACCESSED
  SHARED
  DOWNLOADED
  SCHEDULED
  UNSCHEDULED
  ARCHIVED
  RESTORED
  PERMISSIONS_CHANGED
  TEMPLATE_APPLIED
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_FAILED
  SHARE_REVOKED
}

// Report Audit Log for Tracking Access and Changes
model ReportAuditLog {
  id        String      @id @default(cuid())
  
  reportId  String
  
  // Action Details
  action    AuditAction // Structured action types
  details   Json?       // Additional action details
  success   Boolean     @default(true) // Whether action was successful
  
  // User and Session Information  
  userId    String?     @db.VarChar(30)
  sessionId String?     @db.VarChar(50) // Track user session
  ipAddress String?     @db.VarChar(45) // Support IPv6
  userAgent String?     @db.VarChar(500)
  
  // Request Context
  requestId String?     @db.VarChar(50) // For request tracing
  duration  Int?        // Action duration in milliseconds
  
  // Change Tracking
  oldValues Json?       // Previous values (for updates)
  newValues Json?       // New values (for updates)
  
  // Security and Compliance
  riskLevel String?     @default("LOW") @db.VarChar(10) // LOW, MEDIUM, HIGH
  
  createdAt DateTime    @default(now())
  
  @@index([reportId])
  @@index([userId])
  @@index([action])
  @@index([success])
  @@index([createdAt])
  @@index([riskLevel])
  @@index([sessionId])
  @@index([reportId, action]) // Composite index for report actions
  @@index([userId, createdAt]) // For user activity history
  @@index([action, createdAt]) // For action-based reporting
  @@map("report_audit_logs")
}
