// Enhanced Company and Organization models
// This file contains improved company-related models

// Enhanced Company model with validation and verification
model Company {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(255)
  name_ar     String @db.VarChar(255)
  code        String @unique @db.VarChar(50)
  description String? @db.Text
  email       String? @db.VarChar(255)
  phone       String? @db.VarChar(20)
  website     String? @db.VarChar(255)
  logo        String? @db.VarChar(500)

  // Status and verification
  isActive    Boolean @default(true)
  isVerified  Boolean @default(false)
  verifiedAt  DateTime?
  verifiedBy  String? // Admin who verified

  // Address information
  address     String? @db.VarChar(500)
  city        String? @db.VarChar(100)
  country     String? @db.VarChar(100)
  postalCode  String? @db.VarChar(20)

  // Company size and industry
  sizeId      String?
  companySize CompanySize? @relation(fields: [sizeId], references: [id])

  industryId  String?
  industry    Industry? @relation(fields: [industryId], references: [id])

  // Data management
  isArchived  Boolean @default(false)
  archivedAt  DateTime?

  // Relationships
  departments Department[]
  jobs        Job[]
  employees   Employee[]

  // Email and SMTP Relationships
  smtpConfigurations SmtpConfiguration[]
  emailTemplates     EmailTemplate[]

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int @default(1)
  lastModifiedBy String?

  // Performance indexes
  @@index([code])
  @@index([isActive])
  @@index([isVerified])
  @@index([sizeId])
  @@index([industryId])
  @@index([country])
  @@index([createdAt])

  @@map("companies")
}

// Enhanced Employee model with better constraints
model Employee {
  id           String @id @default(cuid())
  employeeId   String? @db.VarChar(50)

  // User relationship
  userId       String @unique
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Company and Department
  companyId    String
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Job information
  jobTitle_en  String? @db.VarChar(200)
  jobTitle_ar  String? @db.VarChar(200)

  // Employment details
  statusId     String?
  status       EmploymentStatus? @relation(fields: [statusId], references: [id])

  hireDate     DateTime?
  terminationDate DateTime?
  salary       Decimal? @db.Decimal(12,2)
  salaryPeriod SalaryPeriod? @default(YEARLY)

  // Manager relationship
  managerId    String?
  manager      Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager")

  // HR Relationships
  conductedInterviews Interview[] @relation("InterviewConductor")

  // Performance tracking
  performanceRating Decimal? @db.Decimal(3,2) // e.g., 4.5 out of 5

  // Audit fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Performance indexes
  @@index([companyId])
  @@index([departmentId])
  @@index([statusId])
  @@index([managerId])
  @@index([hireDate])

  // Constraints
  @@unique([companyId, employeeId])

  @@map("employees")
}