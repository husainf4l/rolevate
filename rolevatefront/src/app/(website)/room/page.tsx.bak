"use client";


import "@livekit/components-styles";
import { useEffect, useState, Suspense } from "react";
import { useSearchParams } from "next/navigation";
import { Room, RoomEvent } from "livekit-client";
import {
  RoomContext,
  RoomAudioRenderer,
  useVoiceAssistant,
  BarVisualizer,
} from "@livekit/components-react";
import { InterviewerAvatar } from "@/components/interview/InterviewerAvatar";
import Link from "next/link";
import TranscriptionView from "@/components/TranscriptionView";

// Add some global styles for the visualizer
const visualizerStyles = `
  .agent-visualizer {
    --bar-color: #ffffff;
    --bar-color-active: #22c55e;
    width: 100%;
    height: 100%;
  }
`;

function RoomContent() {
  const searchParams = useSearchParams();
  const phone = searchParams.get("phone");
  const [room] = useState(() => new Room());

  const [isCallActive, setIsCallActive] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [interviewStatus, setInterviewStatus] = useState<
    "ready" | "connecting" | "waiting" | "active" | "completed"
  >("ready");

  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (isCallActive) {
      timer = setInterval(() => {
        setCallDuration((prev) => prev + 1);
      }, 1000);
    }
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [isCallActive]);

  useEffect(() => {
    const handleError = (error: Error) => {
      console.error("LiveKit Error:", error);
      alert(
        "Error acquiring camera or microphone permissions. Please make sure you grant the necessary permissions in your browser and reload the tab"
      );
    };
    room.on(RoomEvent.MediaDevicesError, handleError);
    return () => {
      room.off(RoomEvent.MediaDevicesError, handleError);
    };
  }, [room]);

  const startInterview = async () => {
    setInterviewStatus("connecting");
    try {
      const url = new URL("/api/connection-details", window.location.origin);
      const response = await fetch(url.toString());
      const connectionDetails = await response.json();

      await room.connect(
        connectionDetails.serverUrl,
        connectionDetails.participantToken
      );
      await room.localParticipant.setMicrophoneEnabled(true);
      setIsCallActive(true);

      setInterviewStatus("waiting");
      setTimeout(() => {
        setInterviewStatus("active");
      }, 3000);
    } catch (err) {
      console.error(err);
      setInterviewStatus("ready");
    }
  };

  const formatTime = (s: number): string => {
    return `${Math.floor(s / 60)}:${("0" + (s % 60)).slice(-2)}`;
  };

  if (!phone) {
    return (
      <div className="h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <p className="text-xl font-semibold">Invalid Interview Link</p>
          <Link href="/" className="text-blue-400 underline">
            Back to Home
          </Link>
        </div>
      </div>
    );
  }

  return (
    <RoomContext.Provider value={room}>
      <style jsx global>
        {visualizerStyles}
      </style>
      <div className="h-screen bg-slate-900 text-white flex flex-col">
        {/* Interview Content */}
        <div className="flex-1 flex flex-col items-center justify-center p-4">
          <div className="w-full max-w-2xl bg-slate-800 rounded-lg shadow-xl overflow-hidden">
            {/* Status Bar */}
            <div className="bg-slate-700 p-3 flex justify-between items-center">
              <span className="text-sm font-medium">
                Laila (AI Interviewer)
              </span>
              <div className="flex items-center space-x-3">
                <span className="text-xs font-medium">
                  {interviewStatus.toUpperCase()}
                </span>
                {isCallActive && (
                  <div className="text-xs bg-red-500 px-2 py-0.5 rounded-full animate-pulse">
                    {formatTime(callDuration)}
                  </div>
                )}
              </div>
            </div>

            {/* Main content */}
            <div className="p-6 flex flex-col items-center space-y-6">
              {/* Interviewer Avatar */}
              <div className="mb-2">
                <InterviewerAvatar isSpeaking={false} isActive={isCallActive} />
              </div>

              {/* Audio visualization */}
              {isCallActive && <AudioVisualizer />}

              {/* Transcription */}
              {isCallActive && <TranscriptionView />}

              {/* Controls */}
              <div className="w-full flex justify-center mt-6">
                {interviewStatus === "ready" && (
                  <button
                    className="bg-green-500 px-6 py-2 rounded-lg hover:bg-green-600 transition-colors"
                    onClick={startInterview}
                  >
                    Start Interview
                  </button>
                )}

                {interviewStatus === "connecting" && (
                  <div className="text-white px-6 py-2 flex items-center">
                    <span className="animate-pulse">Connecting...</span>
                  </div>
                )}

                {interviewStatus === "waiting" && (
                  <div className="text-yellow-300 px-6 py-2 flex items-center">
                    <svg
                      className="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-300"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Getting Ready...
                  </div>
                )}

                {interviewStatus === "active" && (
                  <button
                    className="bg-red-500 px-6 py-2 rounded-lg hover:bg-red-600 transition-colors"
                    onClick={() => {
                      room.disconnect();
                      setIsCallActive(false);
                      setInterviewStatus("completed");
                    }}
                  >
                    End Interview
                  </button>
                )}

                {interviewStatus === "completed" && (
                  <Link
                    href="/"
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors"
                  >
                    Return to Home
                  </Link>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Audio renderer for LiveKit */}
        <RoomAudioRenderer />
      </div>
    </RoomContext.Provider>
  );
}

function AudioVisualizer() {
  const { state: agentState, audioTrack } = useVoiceAssistant();

  return (
    <div className="w-full max-w-[300px] h-[100px] mb-4">
      <BarVisualizer
        state={agentState}
        barCount={5}
        trackRef={audioTrack}
        className="agent-visualizer"
        options={{ minHeight: 24 }}
      />
    </div>
  );
}

export default function RoomPage() {
  return (
    <Suspense fallback={<div className="min-h-screen bg-[#0F172A] text-[#F8FAFC] flex items-center justify-center px-4">Loading...</div>}>
      <RoomContent />
    </Suspense>
  );
}
