"use client";

import "@livekit/components-styles";
import { useEffect, useState, useCallback } from "react";
import { useSearchParams } from "next/navigation";
import { Room, RoomEvent } from "livekit-client";
import {
  RoomContext,
  useLocalParticipant,
  RoomAudioRenderer,
  useRoomContext,
  useVoiceAssistant,
  BarVisualizer,
} from "@livekit/components-react";
import { InterviewerAvatar } from "@/components/interview/InterviewerAvatar";
import Link from "next/link";
import { ConnectionDetails } from "@/app/api/connection-details/route";
import TranscriptionView from "@/components/TranscriptionView";
import useCombinedTranscriptions from "@/hooks/useCombinedTranscriptions";

// Add some global styles for the visualizer
const visualizerStyles = `
  .agent-visualizer {
    --bar-color: #ffffff;
    --bar-color-active: #22c55e;
    width: 100%;
    height: 100%;
  }
`;

export default function RoomPage() {
  const searchParams = useSearchParams();
  const phone = searchParams.get("phone");
  const [room] = useState(() => new Room());

  const [isCallActive, setIsCallActive] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [callDuration, setCallDuration] = useState(0);
  const [interviewStatus, setInterviewStatus] = useState<
    "ready" | "connecting" | "waiting" | "active" | "completed"
  >("ready");

  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (isCallActive) {
      timer = setInterval(() => {
        setCallDuration((prev) => prev + 1);
      }, 1000);
    }
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [isCallActive]);

  useEffect(() => {
    const handleError = (error: Error) => {
      console.error("LiveKit Error:", error);
      alert(
        "Error acquiring camera or microphone permissions. Please make sure you grant the necessary permissions in your browser and reload the tab"
      );
    };
    room.on(RoomEvent.MediaDevicesError, handleError);
    return () => {
      room.off(RoomEvent.MediaDevicesError, handleError);
    };
  }, [room]);

  const startInterview = async () => {
    setInterviewStatus("connecting");
    try {
      // Use the existing connection-details API
      const url = new URL("/api/connection-details", window.location.origin);
      const response = await fetch(url.toString());
      const connectionDetails = await response.json();

      await room.connect(
        connectionDetails.serverUrl,
        connectionDetails.participantToken
      );
      await room.localParticipant.setMicrophoneEnabled(true);
      setIsCallActive(true);
      
      // Set to waiting state for 3 seconds before marking as active
      setInterviewStatus("waiting");
      setTimeout(() => {
        setInterviewStatus("active");
      }, 3000); // 3 second delay
    } catch (err) {
      console.error(err);
      setInterviewStatus("ready");
    }
  };

  const toggleMute = () => setIsMuted(!isMuted);

  const formatTime = (s: number): string => {
    return `${Math.floor(s / 60)}:${("0" + (s % 60)).slice(-2)}`;
  };

  if (!phone) {
    return (
      <div className="min-h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-center space-y-4">
          <p className="text-xl font-semibold">Invalid Interview Link</p>
          <Link href="/" className="text-blue-400 underline">
            Back to Home
          </Link>
        </div>
      </div>
    );
  }

  return (
    <RoomContext.Provider value={room}>
      <style jsx global>
        {visualizerStyles}
      </style>
      <div className="min-h-screen bg-slate-900 text-white p-6">
        <div className="max-w-3xl mx-auto space-y-6">
          <header className="flex justify-between items-center">
            <h1 className="text-2xl font-bold">Interview Session</h1>
            {isCallActive && (
              <div className="text-sm bg-red-500 px-3 py-1 rounded-full animate-pulse">
                {formatTime(callDuration)}
              </div>
            )}
          </header>

          <div className="bg-slate-800 p-6 rounded-lg shadow-lg space-y-6">
            <div className="text-sm flex justify-between">
              <span>Laila (AI Interviewer)</span>
              <span>{interviewStatus.toUpperCase()}</span>
            </div>
            <div className="flex justify-center flex-col items-center">
              <InterviewerAvatar isSpeaking={false} isActive={isCallActive} />

              {/* Audio visualization */}
              {isCallActive && <AudioVisualizer />}
            </div>

            {/* Add TranscriptionView to display the conversation */}
            {isCallActive && (
              <div className="mt-6">
                <TranscriptionView />
              </div>
            )}

            <div className="flex justify-center gap-4 mt-4">
              {interviewStatus === "ready" && (
                <button
                  className="bg-green-500 px-6 py-2 rounded hover:bg-green-600"
                  onClick={startInterview}
                >
                  Start Interview
                </button>
              )}
              {interviewStatus === "connecting" && (
                <div className="text-white px-6 py-2">
                  Connecting...
                </div>
              )}
              {interviewStatus === "waiting" && (
                <div className="text-yellow-300 px-6 py-2 flex items-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Getting Ready...
                </div>
              )}
              {interviewStatus === "active" && (
                <button
                  className="bg-red-500 px-6 py-2 rounded hover:bg-red-600"
                  onClick={() => setInterviewStatus("completed")}
                >
                  End Interview
                </button>
              )}
              {interviewStatus === "completed" && (
                <Link href="/" className="text-blue-400 underline">
                  Return to Home
                </Link>
              )}
            </div>
          </div>
        </div>

        {/* Audio renderer for LiveKit */}
        <RoomAudioRenderer />
      </div>
    </RoomContext.Provider>
  );
}

function AudioVisualizer() {
  const { state: agentState, audioTrack } = useVoiceAssistant();

  return (
    <div className="mt-4 w-full max-w-[300px] h-[150px]">
      <BarVisualizer
        state={agentState}
        barCount={5}
        trackRef={audioTrack}
        className="agent-visualizer"
        options={{ minHeight: 24 }}
      />
    </div>
  );
}
