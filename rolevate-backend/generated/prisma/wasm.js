
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userType: 'userType',
  password: 'password',
  email: 'email',
  name: 'name',
  isActive: 'isActive',
  companyId: 'companyId',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  isRevoked: 'isRevoked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  country: 'country',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  website: 'website',
  industry: 'industry',
  numberOfEmployees: 'numberOfEmployees',
  subscription: 'subscription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  code: 'code',
  email: 'email',
  status: 'status',
  companyId: 'companyId',
  usedAt: 'usedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  department: 'department',
  location: 'location',
  salary: 'salary',
  type: 'type',
  deadline: 'deadline',
  description: 'description',
  shortDescription: 'shortDescription',
  responsibilities: 'responsibilities',
  requirements: 'requirements',
  benefits: 'benefits',
  skills: 'skills',
  experience: 'experience',
  education: 'education',
  jobLevel: 'jobLevel',
  workType: 'workType',
  industry: 'industry',
  companyDescription: 'companyDescription',
  status: 'status',
  companyId: 'companyId',
  cvAnalysisPrompt: 'cvAnalysisPrompt',
  interviewPrompt: 'interviewPrompt',
  aiSecondInterviewPrompt: 'aiSecondInterviewPrompt',
  featured: 'featured',
  applicants: 'applicants',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScreeningQuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  type: 'type',
  options: 'options',
  required: 'required',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateProfileScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  nationality: 'nationality',
  currentLocation: 'currentLocation',
  currentJobTitle: 'currentJobTitle',
  currentCompany: 'currentCompany',
  experienceLevel: 'experienceLevel',
  totalExperience: 'totalExperience',
  expectedSalary: 'expectedSalary',
  noticePeriod: 'noticePeriod',
  highestEducation: 'highestEducation',
  fieldOfStudy: 'fieldOfStudy',
  university: 'university',
  graduationYear: 'graduationYear',
  skills: 'skills',
  preferredJobTypes: 'preferredJobTypes',
  preferredWorkType: 'preferredWorkType',
  preferredIndustries: 'preferredIndustries',
  preferredLocations: 'preferredLocations',
  resumeUrl: 'resumeUrl',
  portfolioUrl: 'portfolioUrl',
  linkedInUrl: 'linkedInUrl',
  githubUrl: 'githubUrl',
  isProfilePublic: 'isProfilePublic',
  isOpenToWork: 'isOpenToWork',
  profileSummary: 'profileSummary',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  jobTitle: 'jobTitle',
  company: 'company',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  description: 'description',
  candidateId: 'candidateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  degree: 'degree',
  institution: 'institution',
  fieldOfStudy: 'fieldOfStudy',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  grade: 'grade',
  description: 'description',
  candidateId: 'candidateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CVScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  originalFileName: 'originalFileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  status: 'status',
  isActive: 'isActive',
  extractedData: 'extractedData',
  candidateId: 'candidateId',
  uploadedAt: 'uploadedAt',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  jobId: 'jobId',
  candidateId: 'candidateId',
  coverLetter: 'coverLetter',
  resumeUrl: 'resumeUrl',
  expectedSalary: 'expectedSalary',
  noticePeriod: 'noticePeriod',
  companyNotes: 'companyNotes',
  appliedAt: 'appliedAt',
  reviewedAt: 'reviewedAt',
  interviewScheduledAt: 'interviewScheduledAt',
  interviewedAt: 'interviewedAt',
  rejectedAt: 'rejectedAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScreeningAnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  applicationId: 'applicationId',
  answer: 'answer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  SYSTEM: 'SYSTEM',
  COMPANY: 'COMPANY',
  CANDIDATE: 'CANDIDATE'
};

exports.Country = exports.$Enums.Country = {
  AE: 'AE',
  SA: 'SA',
  QA: 'QA',
  KW: 'KW',
  BH: 'BH',
  OM: 'OM',
  EG: 'EG',
  JO: 'JO',
  LB: 'LB',
  SY: 'SY',
  IQ: 'IQ',
  YE: 'YE',
  MA: 'MA',
  TN: 'TN',
  DZ: 'DZ',
  LY: 'LY',
  SD: 'SD',
  SO: 'SO',
  DJ: 'DJ',
  KM: 'KM'
};

exports.Industry = exports.$Enums.Industry = {
  TECHNOLOGY: 'TECHNOLOGY',
  HEALTHCARE: 'HEALTHCARE',
  FINANCE: 'FINANCE',
  EDUCATION: 'EDUCATION',
  MANUFACTURING: 'MANUFACTURING',
  RETAIL: 'RETAIL',
  CONSTRUCTION: 'CONSTRUCTION',
  TRANSPORTATION: 'TRANSPORTATION',
  HOSPITALITY: 'HOSPITALITY',
  CONSULTING: 'CONSULTING',
  MARKETING: 'MARKETING',
  REAL_ESTATE: 'REAL_ESTATE',
  MEDIA: 'MEDIA',
  AGRICULTURE: 'AGRICULTURE',
  ENERGY: 'ENERGY',
  GOVERNMENT: 'GOVERNMENT',
  NON_PROFIT: 'NON_PROFIT',
  OTHER: 'OTHER'
};

exports.SubscriptionType = exports.$Enums.SubscriptionType = {
  FREE: 'FREE',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  EXPIRED: 'EXPIRED'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  REMOTE: 'REMOTE'
};

exports.JobLevel = exports.$Enums.JobLevel = {
  ENTRY: 'ENTRY',
  MID: 'MID',
  SENIOR: 'SENIOR',
  EXECUTIVE: 'EXECUTIVE'
};

exports.WorkType = exports.$Enums.WorkType = {
  ONSITE: 'ONSITE',
  REMOTE: 'REMOTE',
  HYBRID: 'HYBRID'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED',
  DELETED: 'DELETED'
};

exports.ScreeningQuestionType = exports.$Enums.ScreeningQuestionType = {
  YES_NO: 'YES_NO',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  TEXT: 'TEXT',
  NUMBER: 'NUMBER'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  FRESH_GRADUATE: 'FRESH_GRADUATE',
  ENTRY_LEVEL: 'ENTRY_LEVEL',
  MID_LEVEL: 'MID_LEVEL',
  SENIOR_LEVEL: 'SENIOR_LEVEL',
  EXECUTIVE: 'EXECUTIVE'
};

exports.EducationLevel = exports.$Enums.EducationLevel = {
  HIGH_SCHOOL: 'HIGH_SCHOOL',
  DIPLOMA: 'DIPLOMA',
  BACHELOR: 'BACHELOR',
  MASTER: 'MASTER',
  PHD: 'PHD',
  PROFESSIONAL_CERTIFICATION: 'PROFESSIONAL_CERTIFICATION'
};

exports.CVStatus = exports.$Enums.CVStatus = {
  UPLOADED: 'UPLOADED',
  PROCESSING: 'PROCESSING',
  PROCESSED: 'PROCESSED',
  ERROR: 'ERROR'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  SUBMITTED: 'SUBMITTED',
  REVIEWING: 'REVIEWING',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEWED: 'INTERVIEWED',
  OFFERED: 'OFFERED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  Address: 'Address',
  Company: 'Company',
  Invitation: 'Invitation',
  Job: 'Job',
  ScreeningQuestion: 'ScreeningQuestion',
  CandidateProfile: 'CandidateProfile',
  WorkExperience: 'WorkExperience',
  Education: 'Education',
  CV: 'CV',
  Application: 'Application',
  ScreeningAnswer: 'ScreeningAnswer'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
