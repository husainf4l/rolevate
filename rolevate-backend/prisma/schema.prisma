// =======================================
// SECURITY AUDIT LOGS
// =======================================

model SecurityLog {
  id            String   @id @default(cuid())
  type          String // AUTH_FAILURE, UNAUTHORIZED_ACCESS, etc.
  userId        String?
  ipHash        String // Hashed IP for privacy
  userAgentHash String? // Hashed user agent
  details       Json // Additional event details
  severity      String // LOW, MEDIUM, HIGH, CRITICAL
  createdAt     DateTime @default(now())

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@index([userId, createdAt])
  @@map("security_logs")
}

// =======================================
// LIVEKIT ROOM
// =======================================

model LiveKitRoom {
  id        String   @id @default(cuid())
  name      String   @unique
  metadata  Json?
  createdBy String? // User ID or system
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  FREE
  PRO
  ENTERPRISE
}

enum Industry {
  TECHNOLOGY
  HEALTHCARE
  FINANCE
  EDUCATION
  MANUFACTURING
  RETAIL
  CONSTRUCTION
  TRANSPORTATION
  HOSPITALITY
  CONSULTING
  MARKETING
  REAL_ESTATE
  MEDIA
  AGRICULTURE
  ENERGY
  GOVERNMENT
  NON_PROFIT
  OTHER
}

enum Country {
  AE // United Arab Emirates
  SA // Saudi Arabia
  QA // Qatar
  KW // Kuwait
  BH // Bahrain
  OM // Oman
  EG // Egypt
  JO // Jordan
  LB // Lebanon
  SY // Syria
  IQ // Iraq
  YE // Yemen
  MA // Morocco
  TN // Tunisia
  DZ // Algeria
  LY // Libya
  SD // Sudan
  SO // Somalia
  DJ // Djibouti
  KM // Comoros
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================
// ENUMS
// =======================================

enum UserType {
  SYSTEM
  COMPANY
  CANDIDATE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum TokenType {
  REFRESH
}

enum CVStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  ERROR
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFERED
  REJECTED
  WITHDRAWN
}

enum NotificationType {
  SUCCESS
  WARNING
  INFO
  ERROR
}

enum NotificationCategory {
  APPLICATION
  INTERVIEW
  SYSTEM
  CANDIDATE
  OFFER
}

// =======================================
// USER MANAGEMENT
// =======================================

model User {
  id               String            @id @default(cuid())
  userType         UserType
  password         String?
  email            String?           @unique
  name             String?
  avatar           String? // Path to user avatar image
  isActive         Boolean           @default(true)
  companyId        String?
  company          Company?          @relation(fields: [companyId], references: [id])
  phone            String?
  refreshTokens    RefreshToken[]
  candidateProfile CandidateProfile? // One-to-one relationship with candidate profile
  applicationNotes ApplicationNote[]
  notifications    Notification[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userType])
  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

// =======================================
// NOTIFICATION MANAGEMENT
// =======================================

model Notification {
  id        String               @id @default(cuid())
  type      NotificationType
  category  NotificationCategory
  title     String
  message   String               @db.Text
  timestamp DateTime             @default(now())
  read      Boolean              @default(false)
  actionUrl String?
  metadata  Json?
  userId    String?
  user      User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String?
  company   Company?             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([userId, read])
  @@index([companyId, read])
  @@index([category, timestamp])
  @@index([type, timestamp])
  @@map("notifications")
}

// =======================================
// COMPANY MANAGEMENT
// =======================================

model Address {
  id        String   @id @default(cuid())
  street    String?
  city      String?
  country   Country
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Company {
  id                String           @id @default(cuid())
  name              String
  description       String?          @db.Text
  email             String?
  phone             String?
  website           String?
  logo              String? // Path to company logo image
  industry          Industry?
  numberOfEmployees Int?
  address           Address?
  users             User[]
  jobs              Job[] // Add jobs relationship
  invitations       Invitation[]
  notifications     Notification[]
  communications    Communication[]
  subscription      SubscriptionType @default(FREE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("companies")
}

model Invitation {
  id        String           @id @default(cuid())
  code      String           @unique
  email     String?
  status    InvitationStatus @default(PENDING)
  companyId String
  company   Company          @relation(fields: [companyId], references: [id])
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([code])
  @@index([companyId])
  @@map("invitations")
}

// =======================================
// JOB MANAGEMENT
// =======================================

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum JobLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum WorkType {
  ONSITE
  REMOTE
  HYBRID
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  EXPIRED
  DELETED
}

model Job {
  id                 String    @id @default(cuid())
  title              String
  department         String
  location           String
  salary             String
  type               JobType
  deadline           DateTime
  description        String    @db.Text
  shortDescription   String    @db.Text
  responsibilities   String    @db.Text
  requirements       String    @db.Text
  benefits           String    @db.Text
  skills             String[] // Array of skill strings
  experience         String
  education          String
  jobLevel           JobLevel
  workType           WorkType
  industry           String
  companyDescription String    @db.Text
  status             JobStatus @default(DRAFT)

  // Company relationship
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Applications
  applications Application[]

  // Communications
  communications Communication[]

  // AI prompts for analysis (optional)
  cvAnalysisPrompt        String? @db.Text
  interviewPrompt         String? @db.Text
  aiSecondInterviewPrompt String? @db.Text

  // Metadata
  featured   Boolean  @default(false)
  applicants Int      @default(0)
  views      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
  @@index([status])
  @@index([type])
  @@index([jobLevel])
  @@index([industry])
  @@index([featured])
  @@index([status, deadline]) // Composite index for public job queries
  @@index([featured, status, deadline]) // Composite index for featured jobs
  @@index([createdAt]) // Index for ordering
  @@map("jobs")
}

// =======================================
// CANDIDATE MANAGEMENT
// =======================================

enum ExperienceLevel {
  FRESH_GRADUATE
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  PHD
  PROFESSIONAL_CERTIFICATION
}

model CandidateProfile {
  id String @id @default(cuid())

  // Basic Information
  firstName       String
  lastName        String
  email           String    @unique
  phone           String?
  dateOfBirth     DateTime?
  nationality     Country?
  currentLocation String?

  // Professional Information
  currentJobTitle String?
  currentCompany  String?
  experienceLevel ExperienceLevel?
  totalExperience Int? // Years of experience
  expectedSalary  String?
  noticePeriod    String? // e.g., "30 days", "Immediate"

  // Education
  highestEducation EducationLevel?
  fieldOfStudy     String?
  university       String?
  graduationYear   Int?

  // Skills and Preferences
  skills              String[] // Array of skills
  preferredJobTypes   JobType[] // Preferred job types
  preferredWorkType   WorkType? // Preferred work arrangement
  preferredIndustries Industry[] // Preferred industries
  preferredLocations  String[] // Preferred work locations

  // Saved Jobs
  savedJobs String[] // Array of saved job IDs

  // Documents
  resumeUrl    String? // URL to uploaded resume
  portfolioUrl String? // Portfolio website
  linkedInUrl  String?
  githubUrl    String?

  // Profile Settings
  isProfilePublic Boolean @default(true)
  isOpenToWork    Boolean @default(true)
  profileSummary  String? @db.Text

  // User relationship
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Applications
  applications Application[]

  // CVs
  cvs CV[]

  // Communications
  communications Communication[]

  // Work Experience
  workExperiences WorkExperience[]

  // Education History
  educationHistory Education[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([experienceLevel])
  @@index([isOpenToWork])
  @@index([currentLocation])
  @@map("candidate_profiles")
}

model WorkExperience {
  id          String    @id @default(cuid())
  jobTitle    String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime? // Null if current job
  isCurrent   Boolean   @default(false)
  description String?   @db.Text

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("work_experiences")
}

model Education {
  id           String    @id @default(cuid())
  degree       String // e.g., "Bachelor of Computer Science"
  institution  String
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime? // Null if ongoing
  isCurrent    Boolean   @default(false)
  grade        String? // GPA, percentage, etc.
  description  String?   @db.Text

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([candidateId])
  @@map("education_history")
}

model CV {
  id               String   @id @default(cuid())
  fileName         String
  originalFileName String?
  fileUrl          String
  fileSize         Int? // File size in bytes
  mimeType         String? // e.g., "application/pdf"
  status           CVStatus @default(UPLOADED)
  isActive         Boolean  @default(true) // Only one CV can be active at a time
  extractedData    Json? // JSON object with extracted CV information

  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  uploadedAt  DateTime  @default(now())
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([candidateId])
  @@index([status])
  @@index([isActive])
  @@map("cvs")
}

// =======================================
// APPLICATION MANAGEMENT
// =======================================

// =======================================
// WHATSAPP INTEGRATION
// =======================================

model WhatsAppMessage {
  id          String    @id @default(cuid())
  to          String // Recipient phone number (E.164 format)
  from        String // Your WhatsApp business number
  messageId   String // WhatsApp API message ID
  status      String // sent, delivered, read, failed, etc.
  direction   String // 'inbound' or 'outbound'
  type        String // text, image, template, etc.
  content     String? // Message text or template name
  mediaUrl    String? // If media message
  error       String? // Error message if failed
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([to])
  @@index([from])
  @@index([status])
}

model Application {
  id     String            @id @default(cuid())
  status ApplicationStatus @default(SUBMITTED)

  // Job and Candidate
  jobId       String
  job         Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  // Application Details
  coverLetter    String? @db.Text
  resumeUrl      String? // Specific resume for this application
  expectedSalary String?
  noticePeriod   String?

  // AI CV Analysis Results
  cvAnalysisScore   Float?    @db.DoublePrecision // AI-generated score (0-100)
  cvAnalysisResults Json? // Detailed analysis results
  analyzedAt        DateTime? // When the CV was analyzed

  // Company Notes (internal)
  companyNotes String? @db.Text

  // Notes (HR, AI, System, Activity Log)
  notes ApplicationNote[]

  // Timeline
  appliedAt            DateTime  @default(now())
  reviewedAt           DateTime?
  interviewScheduledAt DateTime?
  interviewedAt        DateTime?
  rejectedAt           DateTime?
  acceptedAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, candidateId]) // Prevent duplicate applications
  @@index([jobId])
  @@index([candidateId])
  @@index([status])
  @@map("applications")
}

model ApplicationNote {
  id            String      @id @default(cuid())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  text          String      @db.Text
  createdAt     DateTime    @default(now())
  source        NoteSource  @default(USER)
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
}

enum NoteSource {
  USER
  AI
  SYSTEM
}

// =======================================
// COMMUNICATION SYSTEM
// =======================================

enum CommunicationType {
  WHATSAPP
  EMAIL
  PHONE
  SMS
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

model Communication {
  id String @id @default(cuid())

  // Relationships
  candidateId String
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)

  // Communication Details
  type      CommunicationType
  direction CommunicationDirection
  status    CommunicationStatus    @default(SENT)

  content String  @db.Text
  subject String? // For emails

  // External IDs for tracking
  whatsappId String? // WhatsApp message ID
  emailId    String? // Email service ID

  // Metadata
  phoneNumber String? // WhatsApp phone number used
  metadata    Json? // Additional data

  // Timestamps
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  failedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, candidateId])
  @@index([companyId, type])
  @@index([sentAt])
  @@map("communications")
}
