generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  username       String         @unique
  name           String?
  firstName      String?
  lastName       String?
  password       String
  phoneNumber    String?
  whatsappNumber String?
  profileImage   String?
  bio            String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastLoginAt    DateTime?
  isActive       Boolean        @default(true)
  role           UserRole       @default(RECRUITER)
  companyId      String?
  jobPosts       JobPost[]      @relation("JobPostCreator")
  notifications  Notification[]
  company        Company?       @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Company {
  id           String        @id @default(uuid())
  name         String        @unique
  displayName  String?
  industry     String?
  description  String?
  website      String?
  logo         String?
  location     String?
  country      String?
  city         String?
  size         CompanySize?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  jobPosts     JobPost[]
  subscription Subscription?
  users        User[]

  @@map("companies")
}

model JobPost {
  id                    String                 @id @default(uuid())
  title                 String
  description           String
  requirements          String
  responsibilities      String?
  benefits              String?
  skills                String[]
  experienceLevel       ExperienceLevel
  location              String?
  workType              WorkType               @default(ONSITE)
  salaryMin             Decimal?
  salaryMax             Decimal?
  currency              String?                @default("USD")
  isActive              Boolean                @default(true)
  isFeatured            Boolean                @default(false)
  viewCount             Int                    @default(0)
  applicationCount      Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  expiresAt             DateTime?
  publishedAt           DateTime?
  enableAiInterview     Boolean                @default(true)
  interviewLanguages    InterviewLanguage[]    @default([ENGLISH])
  interviewDuration     Int                    @default(30)
  aiPrompt              String?
  aiInstructions        String?
  technicalQuestions    Json?
  behavioralQuestions   Json?
  companyId             String
  createdById           String
  applies               Apply[]
  applications          Application[]
  InterviewHistory      InterviewHistory[]
  company               Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy             User                   @relation("JobPostCreator", fields: [createdById], references: [id])
  whatsappConversations WhatsAppConversation[]

  @@map("job_posts")
}

model Application {
  id                String            @id @default(uuid())
  status            ApplicationStatus @default(PENDING)
  appliedAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  whatsappSent      Boolean           @default(false)
  whatsappSentAt    DateTime?
  whatsappMessageId String?
  whatsappStatus    WhatsappStatus?
  cvUrl             String?
  cvFileName        String?
  coverLetter       String?
  isScreeningPassed Boolean?
  screeningNotes    String?
  rejectionReason   String?
  hiredAt           DateTime?
  startDate         DateTime?
  jobPostId         String
  candidateId       String
  candidate         Candidate         @relation(fields: [candidateId], references: [id])
  jobPost           JobPost           @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  cvAnalysis        CvAnalysis?
  fitScore          FitScore?
  interviews        Interview[]
  notifications     Notification[]

  @@unique([jobPostId, candidateId])
  @@map("applications")
}

model CvAnalysis {
  id                    String      @id @default(uuid())
  cvUrl                 String
  extractedText         String?
  candidateName         String?
  candidateEmail        String?
  candidatePhone        String?
  jobId                 String?
  status                String?     @default("pending")
  whatsappLink          String?
  overallScore          Float
  skillsScore           Float
  experienceScore       Float
  educationScore        Float
  languageScore         Float?
  certificationScore    Float?
  summary               String
  strengths             String[]
  weaknesses            String[]
  suggestedImprovements String[]
  skills                String[]
  experience            Json?
  education             Json?
  certifications        String[]
  languages             Json?
  aiModel               String?
  processingTime        Int?
  analyzedAt            DateTime    @default(now())
  applicationId         String      @unique
  candidateId           String
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  candidate             Candidate   @relation(fields: [candidateId], references: [id])

  @@map("cv_analyses")
}

model Interview {
  id                  String            @id @default(uuid())
  type                InterviewType     @default(AI_SCREENING)
  language            InterviewLanguage @default(ENGLISH)
  status              InterviewStatus   @default(SCHEDULED)
  scheduledAt         DateTime
  startedAt           DateTime?
  completedAt         DateTime?
  duration            Int?
  expectedDuration    Int               @default(30)
  roomName            String            @unique
  roomCode            String?           @unique
  roomId              String?
  accessToken         String?
  participantToken    String?
  recordingEnabled    Boolean           @default(true)
  recordingUrl        String?
  candidatePhone      String?
  candidateName       String?
  instructions        String?
  maxDuration         Int?              @default(1800)
  endedAt             DateTime?
  overallScore        Float?
  communicationScore  Float?
  technicalScore      Float?
  behavioralScore     Float?
  confidenceScore     Float?
  clarityScore        Float?
  responseTimeScore   Float?
  summary             String?
  keyHighlights       String[]          @default([])
  areasForImprovement String[]          @default([])
  recommendations     String?
  questionsAsked      Json?
  transcription       String?
  sentimentAnalysis   Json?
  aiModel             String?
  processingTime      Int?
  applicationId       String
  candidateId         String
  application         Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  candidate           Candidate         @relation(fields: [candidateId], references: [id])

  @@map("interviews")
}

model FitScore {
  id              String            @id @default(uuid())
  overallScore    Float
  cvWeight        Float             @default(0.4)
  interviewWeight Float             @default(0.6)
  cvScore         Float?
  interviewScore  Float?
  recommendation  FitRecommendation
  confidence      Float
  reasoning       String
  rankInPool      Int?
  percentile      Float?
  calculatedAt    DateTime          @default(now())
  lastUpdatedAt   DateTime          @updatedAt
  version         String            @default("1.0")
  applicationId   String            @unique
  application     Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("fit_scores")
}

model Notification {
  id            String           @id @default(uuid())
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false)
  readAt        DateTime?
  createdAt     DateTime         @default(now())
  data          Json?
  userId        String
  applicationId String?
  application   Application?     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Candidate {
  id                    String                 @id @default(uuid())
  phoneNumber           String                 @unique
  email                 String?
  name                  String?
  firstName             String?
  lastName              String?
  whatsappNumber        String?
  profileImage          String?
  bio                   String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isActive              Boolean                @default(true)
  cvUrl                 String?
  applies               Apply[]
  applications          Application[]
  cvAnalyses            CvAnalysis[]
  interviewHistories    InterviewHistory[]
  interviews            Interview[]
  whatsappConversations WhatsAppConversation[]

  @@map("candidates")
}

model InterviewHistory {
  id           Int        @id @default(autoincrement())
  candidate_id String?    @db.VarChar(64)
  ai           String?
  user         String?
  language     String?    @db.VarChar(8)
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  jobId        String?    @db.VarChar(64)
  candidate    Candidate? @relation(fields: [candidate_id], references: [id])
  job          JobPost?   @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("interview_history")
}

model Subscription {
  id                   String             @id @default(uuid())
  plan                 SubscriptionPlan   @default(FREE)
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime
  renewsAt             DateTime?
  cancelledAt          DateTime?
  jobPostLimit         Int                @default(5)
  candidateLimit       Int                @default(100)
  interviewLimit       Int                @default(50)
  priceAmount          Decimal?
  currency             String             @default("USD")
  billingCycle         BillingCycle       @default(MONTHLY)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  companyId            String             @unique
  company              Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Apply {
  id          String    @id @default(uuid())
  candidateId String
  jobPostId   String
  cvUrl       String
  coverLetter String?
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobPost     JobPost   @relation(fields: [jobPostId], references: [id])
}

model WhatsAppMessage {
  id             String                @id @default(uuid())
  messageId      String                @unique
  from           String
  to             String?
  direction      MessageDirection
  type           MessageType
  content        String?
  mediaUrl       String?
  mediaType      String?
  templateName   String?
  status         MessageStatus         @default(SENT)
  timestamp      DateTime
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  contactName    String?
  metadata       Json?
  conversationId String?
  conversation   WhatsAppConversation? @relation(fields: [conversationId], references: [id])

  @@index([from])
  @@index([to])
  @@index([timestamp])
  @@index([conversationId])
  @@map("whatsapp_messages")
}

model WhatsAppConversation {
  id               String            @id @default(uuid())
  phoneNumber      String            @unique
  contactName      String?
  lastMessageAt    DateTime
  isActive         Boolean           @default(true)
  templateRequired Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  candidateId      String?
  jobPostId        String?
  candidate        Candidate?        @relation(fields: [candidateId], references: [id])
  jobPost          JobPost?          @relation(fields: [jobPostId], references: [id])
  messages         WhatsAppMessage[]

  @@index([phoneNumber])
  @@index([lastMessageAt])
  @@index([candidateId])
  @@index([jobPostId])
  @@map("whatsapp_conversations")
}

model WhatsAppTemplate {
  id         String         @id @default(uuid())
  name       String         @unique
  status     TemplateStatus
  language   String         @default("en")
  category   String?
  components Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([name])
  @@index([status])
  @@map("whatsapp_templates")
}

enum UserRole {
  SUPER_ADMIN
  COMPANY_ADMIN
  HR_MANAGER
  RECRUITER
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ExperienceLevel {
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  PRINCIPAL
  EXECUTIVE
}

enum WorkType {
  ONSITE
  REMOTE
  HYBRID
}

enum ApplicationStatus {
  PENDING
  CV_SCREENING
  CV_APPROVED
  CV_REJECTED
  INTERVIEW_SCHEDULED
  INTERVIEW_IN_PROGRESS
  INTERVIEW_COMPLETED
  UNDER_REVIEW
  SHORTLISTED
  FINAL_INTERVIEW
  OFFER_EXTENDED
  OFFER_ACCEPTED
  OFFER_DECLINED
  HIRED
  REJECTED
  WITHDRAWN
  ON_HOLD
}

enum WhatsappStatus {
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
  REPLIED
}

enum InterviewLanguage {
  ENGLISH
  ARABIC
  BILINGUAL
}

enum InterviewType {
  AI_SCREENING
  TECHNICAL
  BEHAVIORAL
  FINAL
  CUSTOM
}

enum InterviewStatus {
  SCHEDULED
  READY_TO_START
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  TECHNICAL_ISSUES
  RESCHEDULED
}

enum FitRecommendation {
  STRONG_HIRE
  HIRE
  CONSIDER
  NO_HIRE
  STRONG_NO_HIRE
}

enum NotificationType {
  APPLICATION_RECEIVED
  CV_ANALYZED
  INTERVIEW_SCHEDULED
  INTERVIEW_REMINDER
  INTERVIEW_COMPLETED
  APPLICATION_STATUS_CHANGED
  NEW_MESSAGE
  SYSTEM_UPDATE
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
  PAST_DUE
  TRIALING
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  INTERACTIVE
  BUTTON
  TEMPLATE
  LOCATION
  CONTACT
  STICKER
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
  DISABLED
}
