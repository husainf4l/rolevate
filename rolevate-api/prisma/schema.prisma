//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

// Base Prisma schema configuration
// This file contains the generator and datasource configuration

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Types and User Management Models
// This file contains user-related models and authentication

// User Types Model for flexibility
model UserType {
  id          String @id @default(cuid())
  name_en     String
  name_ar     String
  code        String @unique // e.g., "candidate", "business", "admin"
  description String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Mark default type for new users
  
  users       User[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("user_types")
}

// Enhanced User model with validation and security
model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  firstName String?  @db.VarChar(100)
  lastName  String?  @db.VarChar(100)
  password  String?  @db.VarChar(255) // For hashed passwords
  googleId  String?  @unique @db.VarChar(100)

  // Account status and security
  accountStatus     AccountStatus @default(ACTIVE)
  isActive          Boolean @default(true)
  emailVerified     Boolean @default(false)
  emailVerifiedAt   DateTime?
  phoneVerified     Boolean @default(false)

  // Security tracking
  lastLoginAt       DateTime?
  failedLoginAttempts Int @default(0)
  lockedUntil       DateTime?
  passwordChangedAt DateTime?

  // User type relationship
  userTypeId String
  userType   UserType @relation(fields: [userTypeId], references: [id])

  // Multi-language profile fields
  firstName_ar String? @db.VarChar(100)
  lastName_ar  String? @db.VarChar(100)

  // Contact information
  phone         String? @db.VarChar(20)

  // Privacy and data management
  isArchived    Boolean @default(false)
  archivedAt    DateTime?
  archiveReason String? @db.VarChar(500)

  // RBAC Relationships
  userRoles  UserRole[]
  userGroups UserGroup[]

  // HR System Relationships
  employee     Employee?
  applications JobApplication[] @relation("CandidateApplications")

  // Google Auth Relationship
  googleAuth   GoogleAuth?

  // Email and Notification Relationships
  emailsSentTo EmailLog[] @relation("EmailsSentTo")
  emailsSentBy EmailLog[] @relation("EmailsSentBy")
  notificationSettings NotificationSettings?

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int @default(1)
  lastModifiedBy String?

  // Performance indexes
  @@index([email])
  @@index([userTypeId])
  @@index([accountStatus])
  @@index([isActive])
  @@index([createdAt])
  @@index([emailVerified])
  @@index([lastLoginAt])

  @@map("users")
}

// Enhanced Google Auth with better security
model GoogleAuth {
  id            String @id @default(cuid())

  // User relationship
  userId        String @unique
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Google OAuth data
  googleId      String @unique @db.VarChar(100)
  email         String @db.VarChar(255)
  accessToken   String? @db.Text // For encrypted tokens
  refreshToken  String? @db.Text // For encrypted tokens

  // Security flags
  tokensEncrypted Boolean @default(true)

  // Profile information from Google
  profile       Json? @db.JsonB // Use JsonB for better performance
  picture       String? @db.VarChar(500)

  // OAuth metadata
  scope         String? @db.VarChar(500)
  tokenType     String? @default("Bearer") @db.VarChar(20)
  expiresAt     DateTime?

  // Tracking
  lastLoginAt   DateTime?
  isActive      Boolean @default(true)

  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Performance indexes
  @@index([userId])
  @@index([googleId])
  @@index([isActive])
  @@index([lastLoginAt])

  @@map("google_auth")
}

// Enhanced Notification Settings with enums
model NotificationSettings {
  id                String @id @default(cuid())

  // User relationship
  userId            String @unique
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email notification preferences
  emailEnabled      Boolean @default(true)
  jobAlerts         Boolean @default(true)
  applicationUpdates Boolean @default(true)
  interviewReminders Boolean @default(true)
  marketingEmails   Boolean @default(false)

  // Frequency settings with enum
  emailFrequency    EmailFrequency @default(IMMEDIATE)
  digestTime        String? @default("09:00") @db.VarChar(5)

  // Language preference with enum
  preferredLanguage Language @default(EN)

  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([emailFrequency])
  @@index([preferredLanguage])

  @@map("notification_settings")
}

// Enhanced Company and Organization models
// This file contains improved company-related models

// Enhanced Company model with validation and verification
model Company {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(255)
  name_ar     String @db.VarChar(255)
  code        String @unique @db.VarChar(50)
  description String? @db.Text
  email       String? @db.VarChar(255)
  phone       String? @db.VarChar(20)
  website     String? @db.VarChar(255)
  logo        String? @db.VarChar(500)

  // Status and verification
  isActive    Boolean @default(true)
  isVerified  Boolean @default(false)
  verifiedAt  DateTime?
  verifiedBy  String? // Admin who verified

  // Address information
  address     String? @db.VarChar(500)
  city        String? @db.VarChar(100)
  country     String? @db.VarChar(100)
  postalCode  String? @db.VarChar(20)

  // Company size and industry
  sizeId      String?
  companySize CompanySize? @relation(fields: [sizeId], references: [id])

  industryId  String?
  industry    Industry? @relation(fields: [industryId], references: [id])

  // Data management
  isArchived  Boolean @default(false)
  archivedAt  DateTime?

  // Relationships
  departments Department[]
  jobs        Job[]
  employees   Employee[]

  // Email and SMTP Relationships
  smtpConfigurations SmtpConfiguration[]
  emailTemplates     EmailTemplate[]

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int @default(1)
  lastModifiedBy String?

  // Performance indexes
  @@index([code])
  @@index([isActive])
  @@index([isVerified])
  @@index([sizeId])
  @@index([industryId])
  @@index([country])
  @@index([createdAt])

  @@map("companies")
}

// Enhanced Employee model with better constraints
model Employee {
  id           String @id @default(cuid())
  employeeId   String? @db.VarChar(50)

  // User relationship
  userId       String @unique
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Company and Department
  companyId    String
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Job information
  jobTitle_en  String? @db.VarChar(200)
  jobTitle_ar  String? @db.VarChar(200)

  // Employment details
  statusId     String?
  status       EmploymentStatus? @relation(fields: [statusId], references: [id])

  hireDate     DateTime?
  terminationDate DateTime?
  salary       Decimal? @db.Decimal(12,2)
  salaryPeriod SalaryPeriod? @default(YEARLY)

  // Manager relationship
  managerId    String?
  manager      Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager")

  // HR Relationships
  conductedInterviews Interview[] @relation("InterviewConductor")

  // Performance tracking
  performanceRating Decimal? @db.Decimal(3,2) // e.g., 4.5 out of 5

  // Audit fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Performance indexes
  @@index([companyId])
  @@index([departmentId])
  @@index([statusId])
  @@index([managerId])
  @@index([hireDate])

  // Constraints
  @@unique([companyId, employeeId])

  @@map("employees")
}

// Enhanced Email and Communication models
// This file contains improved email-related models with better security and performance

// Enhanced SMTP Configuration with better security
model SmtpConfiguration {
  id            String @id @default(cuid())

  // Configuration name and description
  name_en       String @db.VarChar(100)
  name_ar       String @db.VarChar(100)
  description   String? @db.VarChar(500)
  isDefault     Boolean @default(false)
  isActive      Boolean @default(true)

  // SMTP Server Settings
  host          String @db.VarChar(255)
  port          Int @default(587) @db.SmallInt
  secure        Boolean @default(false) // true for 465, false for other ports

  // Authentication with security
  username      String @db.VarChar(255) // SMTP username
  password      String @db.Text // Encrypted SMTP password
  isPasswordEncrypted Boolean @default(true)

  // Email Settings
  fromEmail     String @db.VarChar(255) // Default sender email
  fromName_en   String @db.VarChar(100) // Default sender name in English
  fromName_ar   String @db.VarChar(100) // Default sender name in Arabic

  // Optional advanced settings
  encryption    String? @db.VarChar(10) // "tls", "ssl", or null
  timeout       Int? @default(30000) // Connection timeout in ms

  // Rate limiting
  maxEmailsPerHour Int? @default(100)
  maxEmailsPerDay  Int? @default(1000)

  // Company relationship (for multi-tenant setups)
  companyId     String?
  company       Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Usage tracking
  emailsSent    Int @default(0)
  lastUsedAt    DateTime?

  // Health monitoring
  lastHealthCheck DateTime?
  isHealthy       Boolean @default(true)
  lastError       String? @db.Text

  // Relationships
  emailTemplates EmailTemplate[]
  emailLogs     EmailLog[]

  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Performance indexes
  @@index([isDefault])
  @@index([isActive])
  @@index([companyId])
  @@index([isHealthy])

  @@map("smtp_configurations")
}

// Enhanced Email Log with better tracking
model EmailLog {
  id            String @id @default(cuid())

  // Email details
  toEmail       String @db.VarChar(255)
  fromEmail     String @db.VarChar(255)
  subject       String @db.VarChar(500)
  body          String? @db.Text

  // Template used
  templateId    String?
  template      EmailTemplate? @relation(fields: [templateId], references: [id])

  // SMTP Configuration used
  smtpConfigId  String?
  smtpConfig    SmtpConfiguration? @relation(fields: [smtpConfigId], references: [id])

  // Email type
  typeId        String?
  emailType     EmailType? @relation(fields: [typeId], references: [id])

  // User relationships
  sentToUserId  String? // If sent to a registered user
  sentToUser    User? @relation("EmailsSentTo", fields: [sentToUserId], references: [id])

  sentByUserId  String? // Who triggered the email
  sentByUser    User? @relation("EmailsSentBy", fields: [sentByUserId], references: [id])

  // Status and tracking with enum
  status        EmailStatus @default(PENDING)
  errorMessage  String? @db.Text

  // Enhanced delivery tracking
  sentAt        DateTime?
  deliveredAt   DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  bouncedAt     DateTime?

  // Analytics
  openCount     Int @default(0)
  clickCount    Int @default(0)
  unsubscribed  Boolean @default(false)
  unsubscribedAt DateTime?

  // Priority and retry logic
  priority      Int @default(5) @db.SmallInt // 1-10, 10 being highest
  retryCount    Int @default(0) @db.SmallInt
  maxRetries    Int @default(3) @db.SmallInt
  nextRetryAt   DateTime?

  // Metadata
  messageId     String? @db.VarChar(255) // Email service message ID
  metadata      Json? @db.JsonB // Additional tracking data

  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Performance indexes
  @@index([status])
  @@index([sentAt])
  @@index([toEmail])
  @@index([sentToUserId])
  @@index([sentByUserId])
  @@index([templateId])
  @@index([typeId])
  @@index([priority])
  @@index([nextRetryAt])
  @@index([createdAt])

  // Note: Check constraints would validate priority (1-10), retryCount >= 0, maxRetries >= 0
  // These validations should be handled at application level

  @@map("email_logs")
}

// Enhanced Email Template with versioning
model EmailTemplate {
  id            String @id @default(cuid())

  // Template identification
  name_en       String @db.VarChar(200)
  name_ar       String @db.VarChar(200)
  code          String @unique @db.VarChar(100) // e.g., "welcome_email", "job_application_received"
  description   String? @db.VarChar(500)

  // Template content
  subject_en    String @db.VarChar(300)
  subject_ar    String @db.VarChar(300)
  body_en       String @db.Text // HTML or text content
  body_ar       String @db.Text // HTML or text content

  // Template preview text (for email clients)
  previewText_en String? @db.VarChar(200)
  previewText_ar String? @db.VarChar(200)

  // Template type and category
  typeId        String?
  emailType     EmailType? @relation(fields: [typeId], references: [id])

  // Template settings
  isHtml        Boolean @default(true)
  isActive      Boolean @default(true)
  isSystem      Boolean @default(false) // System templates cannot be deleted

  // Versioning
  version       Int @default(1)
  parentTemplateId String? // For template versions
  isPublished   Boolean @default(false)

  // SMTP Configuration
  smtpConfigId  String?
  smtpConfig    SmtpConfiguration? @relation(fields: [smtpConfigId], references: [id])

  // Company relationship (for custom templates)
  companyId     String?
  company       Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Usage tracking
  timesUsed     Int @default(0)
  lastUsedAt    DateTime?

  // A/B Testing
  abTestGroup   String? @db.VarChar(50) // "A", "B", etc.
  conversionRate Decimal? @db.Decimal(5,4) // Success rate

  // Template variables (JSON schema)
  variablesSchema Json? @db.JsonB

  // Relationships
  emailLogs     EmailLog[]

  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Performance indexes
  @@index([code])
  @@index([isActive])
  @@index([isSystem])
  @@index([typeId])
  @@index([companyId])
  @@index([version])
  @@index([isPublished])

  @@map("email_templates")
}

// Prisma Enums for better type safety and performance
// This file contains all enum definitions

enum EmailFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum Language {
  EN
  AR
}

enum Currency {
  USD
  EUR
  SAR
  AED
  GBP
  JPY
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
  DELIVERED
  OPENED
  CLICKED
}

enum SalaryPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum InterviewRecommendation {
  HIRE
  REJECT
  MAYBE
  PENDING
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  LOCKED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

// Missing lookup table models that act like enums
model CompanySize {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  companies   Company[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("company_sizes")
}

model Industry {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  companies   Company[]
  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("industries")
}

model Department {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  companyId   String
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  employees   Employee[]
  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@map("departments")
}

model EmailType {
  id            String @id @default(cuid())
  name_en       String @db.VarChar(100)
  name_ar       String @db.VarChar(100)
  code          String @unique @db.VarChar(50)
  description   String? @db.VarChar(500)
  isActive      Boolean @default(true)

  emailLogs     EmailLog[]
  emailTemplates EmailTemplate[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("email_types")
}

model EmploymentStatus {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  employees   Employee[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("employment_statuses")
}

model JobType {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_types")
}

model JobLevel {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  level       Int? // Numeric level (1-10)
  isActive    Boolean @default(true)

  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_levels")
}

model JobLocation {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  city        String? @db.VarChar(100)
  country     String? @db.VarChar(100)
  isRemote    Boolean @default(false)
  isActive    Boolean @default(true)

  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([country])
  @@index([isRemote])
  @@map("job_locations")
}

model JobStatus {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  jobs        Job[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_statuses")
}

model ApplicationStatus {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  applications JobApplication[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("application_statuses")
}

model InterviewType {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  duration    Int? @db.SmallInt // Default duration in minutes
  isActive    Boolean @default(true)

  interviews  Interview[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("interview_types")
}

model InterviewStatus {
  id          String @id @default(cuid())
  name_en     String @db.VarChar(100)
  name_ar     String @db.VarChar(100)
  code        String @unique @db.VarChar(50)
  description String? @db.VarChar(500)
  isActive    Boolean @default(true)

  interviews  Interview[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("interview_statuses")
}

// Enhanced Job and Application models
// This file contains improved job-related models with better performance and validation

// Enhanced Job model with validation and indexes
model Job {
  id              String @id @default(cuid())
  title_en        String @db.VarChar(300)
  title_ar        String @db.VarChar(300)
  description_en  String @db.Text
  description_ar  String @db.Text
  requirements_en String? @db.Text
  requirements_ar String? @db.Text

  // Company and Department
  companyId       String
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])

  // Job details
  industryId      String?
  industry        Industry? @relation(fields: [industryId], references: [id])

  typeId          String?
  jobType         JobType? @relation(fields: [typeId], references: [id])

  levelId         String?
  jobLevel        JobLevel? @relation(fields: [levelId], references: [id])

  locationId      String?
  location        JobLocation? @relation(fields: [locationId], references: [id])

  // Enhanced salary information
  salaryMin       Decimal? @db.Decimal(12,2)
  salaryMax       Decimal? @db.Decimal(12,2)
  currency        Currency? @default(USD)
  salaryPeriod    SalaryPeriod? @default(YEARLY)
  salaryNegotiable Boolean @default(false)

  // Job status and timeline
  statusId        String?
  status          JobStatus? @relation(fields: [statusId], references: [id])

  postedDate      DateTime @default(now())
  closingDate     DateTime?

  // Enhanced requirements
  experienceYears Int? @db.SmallInt
  experienceYearsMax Int? @db.SmallInt
  educationLevel  String? @db.VarChar(100)

  // Job preferences
  remoteAllowed   Boolean @default(false)
  urgentHiring    Boolean @default(false)
  featured        Boolean @default(false)

  // Performance tracking
  viewsCount      Int @default(0)
  applicationsCount Int @default(0)

  // Relationships
  applications    JobApplication[]
  interviews      Interview[]

  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  version         Int @default(1)
  lastModifiedBy  String?

  // Performance indexes for job search
  @@index([companyId])
  @@index([statusId])
  @@index([postedDate])
  @@index([closingDate])
  @@index([companyId, statusId])
  @@index([industryId])
  @@index([typeId])
  @@index([levelId])
  @@index([locationId])
  @@index([currency])
  @@index([experienceYears])
  @@index([remoteAllowed])
  @@index([featured])
  @@index([urgentHiring])

  // Full-text search indexes (PostgreSQL specific)
  @@index([title_en], type: Gin)
  @@index([title_ar], type: Gin)

  // Note: Check constraints would validate salaryMin >= 0, salaryMax >= salaryMin,
  // experienceYears >= 0, experienceYearsMax >= experienceYears
  // These validations should be handled at application level

  @@map("jobs")
}

// Enhanced Job Application with better tracking
model JobApplication {
  id          String @id @default(cuid())

  // Candidate (User) relationship
  candidateId String
  candidate   User @relation("CandidateApplications", fields: [candidateId], references: [id], onDelete: Cascade)

  // Job relationship
  jobId       String
  job         Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  // Application details
  coverLetter String? @db.Text
  resume      String? @db.VarChar(500) // URL to resume file

  // Additional application fields
  portfolioUrl String? @db.VarChar(500)
  linkedinUrl  String? @db.VarChar(500)
  githubUrl    String? @db.VarChar(500)
  expectedSalary Decimal? @db.Decimal(12,2)
  availableFrom DateTime?

  // Application status
  statusId    String?
  status      ApplicationStatus? @relation(fields: [statusId], references: [id])

  // Tracking
  appliedAt   DateTime @default(now())
  reviewedAt  DateTime?
  reviewedBy  String? // User ID of reviewer

  // Rating and scoring
  initialScore Decimal? @db.Decimal(3,2) // Initial screening score
  finalScore   Decimal? @db.Decimal(3,2) // Final evaluation score

  // Notes and feedback
  notes       String? @db.Text
  feedback    String? @db.Text

  // Communication tracking
  lastContactAt DateTime?
  nextFollowUp  DateTime?

  // Relationships
  interviews  Interview[]

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Performance indexes
  @@index([candidateId])
  @@index([jobId])
  @@index([statusId])
  @@index([appliedAt])
  @@index([reviewedAt])
  @@index([candidateId, jobId])
  @@index([jobId, statusId])
  @@index([reviewedBy])

  // Unique constraint
  @@unique([candidateId, jobId])

  @@map("job_applications")
}

// Enhanced Interview model with better scheduling
model Interview {
  id            String @id @default(cuid())

  // Application relationship
  applicationId String
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  // Interview details
  typeId        String?
  interviewType InterviewType? @relation(fields: [typeId], references: [id])

  // Enhanced scheduling
  scheduledAt   DateTime
  duration      Int? @db.SmallInt // Duration in minutes
  location      String? @db.VarChar(500) // Physical location or meeting link
  timeZone      String? @db.VarChar(50) // e.g., "UTC", "America/New_York"

  // Participants
  conductorId   String // Employee conducting the interview
  conductor     Employee @relation("InterviewConductor", fields: [conductorId], references: [id])

  // Additional participants
  additionalInterviewers String? @db.Text // JSON array of interviewer IDs

  // Interview status
  statusId      String?
  status        InterviewStatus? @relation(fields: [statusId], references: [id])

  // Enhanced results and feedback
  notes         String? @db.Text
  feedback      String? @db.Text
  rating        Int? @db.SmallInt // Rating out of 10
  recommendation InterviewRecommendation?

  // Skills assessment
  technicalRating   Int? @db.SmallInt // Technical skills rating
  communicationRating Int? @db.SmallInt // Communication skills rating
  culturalFitRating  Int? @db.SmallInt // Cultural fit rating

  // Meeting logistics
  meetingUrl    String? @db.VarChar(500)
  meetingId     String? @db.VarChar(100)
  dialInNumber  String? @db.VarChar(50)

  // Follow-up tracking
  followUpRequired Boolean @default(false)
  followUpNotes   String? @db.Text

  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Performance indexes
  @@index([applicationId])
  @@index([conductorId])
  @@index([scheduledAt])
  @@index([statusId])
  @@index([typeId])
  @@index([recommendation])

  // Note: Check constraints would validate rating (1-10), technicalRating (1-10),
  // communicationRating (1-10), culturalFitRating (1-10), duration > 0
  // These validations should be handled at application level

  @@map("interviews")
}

// Role-Based Access Control (RBAC) Models
// This file contains all permission, role, and group models

// Permission Actions Model for extensibility
model PermissionAction {
  id          String @id @default(cuid())
  name_en     String
  name_ar     String
  code        String @unique // e.g., "create", "read", "update", "delete"
  description String?
  isActive    Boolean @default(true)
  
  permissions Permission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("permission_actions")
}

// Permission Resources Model for modularity
model PermissionResource {
  id          String @id @default(cuid())
  name_en     String
  name_ar     String
  code        String @unique // e.g., "user", "role", "job", "application"
  description String?
  isActive    Boolean @default(true)
  
  permissions Permission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("permission_resources")
}

// Permission Categories for better organization
model PermissionCategory {
  id          String       @id @default(cuid())
  name_en     String
  name_ar     String
  code        String       @unique
  description String?
  isActive    Boolean      @default(true)
  
  permissions Permission[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("permission_categories")
}

// Granular permissions
model Permission {
  id          String             @id @default(cuid())
  name_en     String
  name_ar     String
  code        String             @unique // e.g., "user.create", "job.approve"
  description String?
  isActive    Boolean            @default(true)
  
  // Action relationship
  actionId    String
  action      PermissionAction   @relation(fields: [actionId], references: [id])
  
  // Resource relationship
  resourceId  String
  resource    PermissionResource @relation(fields: [resourceId], references: [id])
  
  // Category relationship
  categoryId  String
  category    PermissionCategory @relation(fields: [categoryId], references: [id])
  
  // Many-to-many with roles
  rolePermissions RolePermission[]
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  @@unique([actionId, resourceId]) // Ensure unique action-resource combinations
  @@map("permissions")
}

// Organization/Division Structure
model Group {
  id          String   @id @default(cuid())
  name_en     String
  name_ar     String
  code        String   @unique // Unique identifier for the group
  description String?
  isActive    Boolean  @default(true)
  
  // Hierarchical structure - self-referencing
  parentId    String?
  parent      Group?   @relation("GroupHierarchy", fields: [parentId], references: [id])
  children    Group[]  @relation("GroupHierarchy")
  
  // Many-to-many with users
  userGroups  UserGroup[]
  
  // Many-to-many with roles (group can have specific roles)
  groupRoles  GroupRole[]
  
  // User roles within this group
  userRolesInGroup UserRole[] @relation("UserRoleGroup")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("groups")
}

// Roles with hierarchy support
model Role {
  id          String   @id @default(cuid())
  name_en     String
  name_ar     String
  code        String   @unique // e.g., "admin", "hr_manager", "recruiter"
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  
  // Role hierarchy - self-referencing
  parentId    String?
  parent      Role?    @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    Role[]   @relation("RoleHierarchy")
  
  // Many-to-many with permissions
  rolePermissions RolePermission[]
  
  // Many-to-many with users
  userRoles   UserRole[]
  
  // Many-to-many with groups
  groupRoles  GroupRole[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("roles")
}

// Junction Tables
model UserRole {
  id       String @id @default(cuid())
  userId   String
  roleId   String
  isActive Boolean @default(true)
  
  // Optional: Role assignment within specific groups
  groupId  String?
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  group    Group? @relation("UserRoleGroup", fields: [groupId], references: [id])
  
  assignedAt DateTime @default(now())
  assignedBy String? // User ID who assigned this role
  expiresAt  DateTime? // Optional expiration
  
  @@unique([userId, roleId, groupId])
  @@map("user_roles")
}

model UserGroup {
  id       String @id @default(cuid())
  userId   String
  groupId  String
  isActive Boolean @default(true)
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  joinedBy String? // User ID who added user to group
  
  @@unique([userId, groupId])
  @@map("user_groups")
}

model GroupRole {
  id       String @id @default(cuid())
  groupId  String
  roleId   String
  isActive Boolean @default(true)
  
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  assignedBy String? // User ID who assigned this role to group
  
  @@unique([groupId, roleId])
  @@map("group_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean @default(true)
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  grantedAt    DateTime @default(now())
  grantedBy    String? // User ID who granted this permission
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}