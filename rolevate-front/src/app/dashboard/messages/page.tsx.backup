"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import Header from "@/components/dashboard/Header";
import Link from "next/link";
import {
  MagnifyingGlassIcon,
  FunnelIcon,
  ChatBubbleLeftRightIcon,
  PhoneIcon,
  EnvelopeIcon,
  VideoCameraIcon,
  PaperAirplaneIcon,
  UserIcon,
  ClockIcon,
  CheckIcon,
  XMarkIcon,
  EllipsisVerticalIcon,
  DocumentTextIcon,
  CalendarDaysIcon,
  CheckCircleIcon,
} from "@heroicons/react/24/outline";

interface CommunicationRecord {
  id: string;
  candidateId: string;
  candidateName: string;
  candidateEmail: string;
  position: string;
  type: "email" | "whatsapp" | "call" | "video" | "sms" | "linkedin";
  direction: "inbound" | "outbound";
  subject?: string;
  content: string;
  timestamp: string;
  status: "sent" | "delivered" | "read" | "replied" | "failed";
  hrUser: string;
  attachments?: string[];
  duration?: number; // for calls in minutes
  tags?: string[];
  priority: "high" | "medium" | "low";
  relatedJobId: string;
  followUp?: string;
}

const communicationHistory: CommunicationRecord[] = [
  {
    id: "1",
    candidateId: "1",
    candidateName: "Sarah Al-Ahmad",
    candidateEmail: "sarah.ahmad@email.com",
    position: "Senior Frontend Developer",
    type: "email",
    direction: "outbound",
    subject: "Interview Invitation - Senior Frontend Developer Position",
    content:
      "Dear Sarah, We are pleased to invite you for an interview for the Senior Frontend Developer position. Your profile shows excellent qualifications...",
    timestamp: "2024-12-08 10:30",
    status: "read",
    hrUser: "Emma Johnson",
    attachments: ["interview_details.pdf"],
    tags: ["interview", "invitation"],
    priority: "high",
    relatedJobId: "1",
    followUp: "2024-12-10 14:00",
  },
  {
    id: "2",
    candidateId: "1",
    candidateName: "Sarah Al-Ahmad",
    candidateEmail: "sarah.ahmad@email.com",
    position: "Senior Frontend Developer",
    type: "whatsapp",
    direction: "inbound",
    content:
      "Hi Emma, thank you for the interview invitation. I'm available for the scheduled time. Looking forward to it!",
    timestamp: "2024-12-08 14:15",
    status: "delivered",
    hrUser: "Emma Johnson",
    tags: ["response", "confirmation"],
    priority: "medium",
    relatedJobId: "1",
  },
  {
    id: "3",
    candidateId: "2",
    candidateName: "Mohammed Hassan",
    candidateEmail: "m.hassan@email.com",
    position: "React Developer",
    type: "call",
    direction: "outbound",
    content:
      "Initial screening call to discuss React Developer position and candidate's experience",
    timestamp: "2024-12-08 16:00",
    status: "sent",
    hrUser: "David Chen",
    duration: 25,
    tags: ["screening", "initial"],
    priority: "medium",
    relatedJobId: "2",
  },
  {
    id: "4",
    candidateId: "3",
    candidateName: "Fatima Al-Zahra",
    candidateEmail: "fatima.zahra@email.com",
    position: "UI/UX Designer",
    type: "email",
    direction: "outbound",
    subject: "Job Offer - UI/UX Designer Position",
    content:
      "Congratulations! We are delighted to offer you the UI/UX Designer position at our company. Please find the offer letter attached...",
    timestamp: "2024-12-08 09:45",
    status: "read",
    hrUser: "Sarah Wilson",
    attachments: ["offer_letter.pdf", "benefits_package.pdf"],
    tags: ["offer", "congratulations"],
    priority: "high",
    relatedJobId: "3",
  },
  {
    id: "5",
    candidateId: "3",
    candidateName: "Fatima Al-Zahra",
    candidateEmail: "fatima.zahra@email.com",
    position: "UI/UX Designer",
    type: "video",
    direction: "outbound",
    content: "Final interview and offer discussion via video call",
    timestamp: "2024-12-07 15:30",
    status: "sent",
    hrUser: "Sarah Wilson",
    duration: 45,
    tags: ["final", "interview"],
    priority: "high",
    relatedJobId: "3",
  },
  {
    id: "6",
    candidateId: "4",
    candidateName: "Omar Khalil",
    candidateEmail: "omar.khalil@email.com",
    position: "Full Stack Developer",
    type: "email",
    direction: "outbound",
    subject: "Welcome to the Team!",
    content:
      "Welcome aboard! We're excited to have you join our development team. Your first day is scheduled for...",
    timestamp: "2024-12-06 11:20",
    status: "read",
    hrUser: "Michael Torres",
    attachments: ["welcome_package.pdf", "first_day_schedule.pdf"],
    tags: ["welcome", "onboarding"],
    priority: "high",
    relatedJobId: "4",
  },
  {
    id: "7",
    candidateId: "5",
    candidateName: "Layla Ibrahim",
    candidateEmail: "layla.ibrahim@email.com",
    position: "DevOps Engineer",
    type: "whatsapp",
    direction: "outbound",
    content:
      "Hi Layla, just wanted to check if you received our email about the technical assessment. Let me know if you have any questions!",
    timestamp: "2024-12-08 13:00",
    status: "delivered",
    hrUser: "Emma Johnson",
    tags: ["follow-up", "assessment"],
    priority: "medium",
    relatedJobId: "6",
  },
  {
    id: "8",
    candidateId: "6",
    candidateName: "Ahmed Mansour",
    candidateEmail: "ahmed.mansour@email.com",
    position: "Mobile App Developer",
    type: "email",
    direction: "outbound",
    subject: "Application Status Update",
    content:
      "Thank you for your interest in the Mobile App Developer position. After careful consideration, we have decided to move forward with other candidates...",
    timestamp: "2024-12-05 14:30",
    status: "read",
    hrUser: "David Chen",
    tags: ["rejection", "closure"],
    priority: "low",
    relatedJobId: "7",
  },
  {
    id: "9",
    candidateId: "7",
    candidateName: "Nour El-Din",
    candidateEmail: "nour.eldin@email.com",
    position: "Data Scientist",
    type: "call",
    direction: "inbound",
    content:
      "Candidate called to discuss salary negotiation and start date flexibility",
    timestamp: "2024-12-08 11:45",
    status: "sent",
    hrUser: "Sarah Wilson",
    duration: 18,
    tags: ["negotiation", "salary"],
    priority: "high",
    relatedJobId: "8",
  },
  {
    id: "10",
    candidateId: "8",
    candidateName: "Yusuf Al-Rashid",
    candidateEmail: "yusuf.rashid@email.com",
    position: "Product Manager",
    type: "linkedin",
    direction: "outbound",
    content:
      "Connected with candidate on LinkedIn and sent initial message about Product Manager opportunity",
    timestamp: "2024-12-08 08:30",
    status: "sent",
    hrUser: "Michael Torres",
    tags: ["outreach", "linkedin"],
    priority: "medium",
    relatedJobId: "5",
  },
];

const getTypeIcon = (type: string) => {
  switch (type) {
    case "email":
      return <EnvelopeIcon className="w-5 h-5" />;
    case "whatsapp":
      return <ChatBubbleLeftRightIcon className="w-5 h-5" />;
    case "call":
      return <PhoneIcon className="w-5 h-5" />;
    case "video":
      return <VideoCameraIcon className="w-5 h-5" />;
    case "sms":
      return <ChatBubbleLeftRightIcon className="w-5 h-5" />;
    case "linkedin":
      return <UserIcon className="w-5 h-5" />;
    default:
      return <ChatBubbleLeftRightIcon className="w-5 h-5" />;
  }
};

const getTypeColor = (type: string) => {
  switch (type) {
    case "email":
      return "bg-blue-100 text-blue-800";
    case "whatsapp":
      return "bg-green-100 text-green-800";
    case "call":
      return "bg-purple-100 text-purple-800";
    case "video":
      return "bg-red-100 text-red-800";
    case "sms":
      return "bg-yellow-100 text-yellow-800";
    case "linkedin":
      return "bg-indigo-100 text-indigo-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case "sent":
      return <PaperAirplaneIcon className="w-4 h-4 text-gray-500" />;
    case "delivered":
      return <CheckIcon className="w-4 h-4 text-blue-500" />;
    case "read":
      return <CheckCircleIcon className="w-4 h-4 text-green-500" />;
    case "replied":
      return <ChatBubbleLeftRightIcon className="w-4 h-4 text-[#0891b2]" />;
    case "failed":
      return <XMarkIcon className="w-4 h-4 text-red-500" />;
    default:
      return <ClockIcon className="w-4 h-4 text-gray-400" />;
  }
};

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case "high":
      return "bg-red-100 text-red-800";
    case "medium":
      return "bg-yellow-100 text-yellow-800";
    case "low":
      return "bg-green-100 text-green-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
};

export default function CommunicationPage() {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState<string>("all");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  const [selectedMessage, setSelectedMessage] =
    useState<CommunicationRecord | null>(null);

  const filteredCommunications = communicationHistory.filter((comm) => {
    const matchesSearch =
      comm.candidateName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      comm.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      comm.subject?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      comm.position.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesType = filterType === "all" || comm.type === filterType;
    const matchesStatus =
      filterStatus === "all" || comm.status === filterStatus;

    return matchesSearch && matchesType && matchesStatus;
  });

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleString();
  };

  return (
    <div className="min-h-screen">
      <Header
        title="Communication Center"
        subtitle="Track all candidate communications across channels"
      />

      <div className="pt-20 px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {/* Action Buttons */}
          <div className="mb-8 flex justify-between items-center">
            <div></div>
            <div className="flex items-center gap-3">
              <button className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium">
                Export Report
              </button>
              <button className="px-4 py-2 bg-[#0891b2] text-white rounded-lg hover:bg-[#0fc4b5] transition-colors font-medium">
                New Communication
              </button>
            </div>
          </div>

          {/* Communication Stats */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    Total Communications
                  </p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">
                    {communicationHistory.length}
                  </p>
                </div>
                <div className="p-3 rounded-lg bg-[#0891b2]/10">
                  <ChatBubbleLeftRightIcon className="w-6 h-6 text-[#0891b2]" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    Emails Sent
                  </p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">
                    {
                      communicationHistory.filter((c) => c.type === "email")
                        .length
                    }
                  </p>
                </div>
                <div className="p-3 rounded-lg bg-blue-100">
                  <EnvelopeIcon className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    Calls Made
                  </p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">
                    {
                      communicationHistory.filter(
                        (c) => c.type === "call" || c.type === "video"
                      ).length
                    }
                  </p>
                </div>
                <div className="p-3 rounded-lg bg-purple-100">
                  <PhoneIcon className="w-6 h-6 text-purple-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    WhatsApp Messages
                  </p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">
                    {
                      communicationHistory.filter((c) => c.type === "whatsapp")
                        .length
                    }
                  </p>
                </div>
                <div className="p-3 rounded-lg bg-green-100">
                  <ChatBubbleLeftRightIcon className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">
                    Response Rate
                  </p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">
                    {Math.round(
                      (communicationHistory.filter(
                        (c) => c.status === "replied"
                      ).length /
                        communicationHistory.length) *
                        100
                    )}
                    %
                  </p>
                </div>
                <div className="p-3 rounded-lg bg-[#0fc4b5]/10">
                  <CheckCircleIcon className="w-6 h-6 text-[#0fc4b5]" />
                </div>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 mb-8">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">
                Filter & Search
              </h3>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
                <div className="lg:col-span-5">
                  <div className="relative">
                    <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search communications by candidate, content, or subject..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#0891b2] focus:border-transparent text-sm"
                    />
                  </div>
                </div>

                <div className="lg:col-span-2">
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#0891b2] focus:border-transparent text-sm"
                  >
                    <option value="all">All Types</option>
                    <option value="email">Email</option>
                    <option value="whatsapp">WhatsApp</option>
                    <option value="call">Phone Call</option>
                    <option value="video">Video Call</option>
                    <option value="sms">SMS</option>
                    <option value="linkedin">LinkedIn</option>
                  </select>
                </div>

                <div className="lg:col-span-2">
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#0891b2] focus:border-transparent text-sm"
                  >
                    <option value="all">All Status</option>
                    <option value="sent">Sent</option>
                    <option value="delivered">Delivered</option>
                    <option value="read">Read</option>
                    <option value="replied">Replied</option>
                    <option value="failed">Failed</option>
                  </select>
                </div>

                <div className="lg:col-span-2">
                  <button className="w-full px-4 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors font-medium text-sm">
                    <FunnelIcon className="w-4 h-4 mx-auto" />
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Communications List */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-200">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">
                  Communications ({filteredCommunications.length})
                </h2>
                <div className="flex items-center gap-2">
                  <button className="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                    Export
                  </button>
                  <button className="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                    Archive
                  </button>
                </div>
              </div>
            </div>

            <div className="divide-y divide-gray-200">
              {filteredCommunications.map((comm) => (
                <div
                  key={comm.id}
                  className="p-6 hover:bg-gray-50 transition-colors cursor-pointer"
                  onClick={() => router.push(`/dashboard/messages/${comm.id}`)}
                >
                  <div className="flex items-start gap-4">
                    <div className="flex-shrink-0">
                      <div
                        className={`w-10 h-10 rounded-full flex items-center justify-center ${getTypeColor(
                          comm.type
                        )}`}
                      >
                        {getTypeIcon(comm.type)}
                      </div>
                    </div>

                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-3">
                          <h3 className="text-sm font-semibold text-gray-900">
                            {comm.candidateName}
                          </h3>
                          <span className="text-sm text-gray-500">
                            {comm.position}
                          </span>
                          <span
                            className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(
                              comm.priority
                            )}`}
                          >
                            {comm.priority}
                          </span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-gray-500">
                            {formatTimestamp(comm.timestamp)}
                          </span>
                          {getStatusIcon(comm.status)}
                        </div>
                      </div>

                      {comm.subject && (
                        <p className="text-sm font-medium text-gray-700 mb-1">
                          {comm.subject}
                        </p>
                      )}

                      <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                        {comm.content}
                      </p>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-xs text-gray-500">
                          <span>By: {comm.hrUser}</span>
                          {comm.duration && (
                            <span>Duration: {comm.duration} min</span>
                          )}
                          {comm.attachments && (
                            <span className="flex items-center gap-1">
                              <DocumentTextIcon className="w-3 h-3" />
                              {comm.attachments.length} attachment(s)
                            </span>
                          )}
                          {comm.followUp && (
                            <span className="flex items-center gap-1">
                              <CalendarDaysIcon className="w-3 h-3" />
                              Follow-up: {comm.followUp}
                            </span>
                          )}
                        </div>

                        <div className="flex items-center gap-2">
                          <Link
                            href={`/dashboard/candidates/${comm.candidateId}`}
                            className="text-[#0891b2] hover:text-[#0fc4b5] font-medium text-sm"
                            onClick={(e) => e.stopPropagation()}
                          >
                            View Profile
                          </Link>
                          <button 
                            className="text-gray-600 hover:text-gray-800 font-medium text-sm"
                            onClick={(e) => e.stopPropagation()}
                          >
                            Reply
                          </button>
                          <button 
                            className="text-gray-400 hover:text-gray-600"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <EllipsisVerticalIcon className="w-4 h-4" />
                          </button>
                        </div>
                      </div>

                      {comm.tags && comm.tags.length > 0 && (
                        <div className="flex items-center gap-1 mt-2">
                          {comm.tags.map((tag, index) => (
                            <span
                              key={index}
                              className="px-2 py-1 bg-gray-100 text-gray-600 rounded-full text-xs"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
          <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getTypeColor(selectedMessage.type)}`}>
                    {getTypeIcon(selectedMessage.type)}
                  </div>
                  <div>
                    <h2 className="text-lg font-semibold text-gray-900">
                      Communication Details
                    </h2>
                    <p className="text-sm text-gray-600">
                      {selectedMessage.type.charAt(0).toUpperCase() + selectedMessage.type.slice(1)} • {selectedMessage.direction}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => setSelectedMessage(null)}
                  className="text-gray-400 hover:text-gray-600 p-2"
                >
                  <XMarkIcon className="w-6 h-6" />
                </button>
              </div>
            </div>

            {/* Modal Content */}
            <div className="p-6 space-y-6">
              {/* Candidate Information */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-gray-900 mb-3">Candidate Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-500">Name:</span>
                    <span className="ml-2 font-medium text-gray-900">{selectedMessage.candidateName}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">Email:</span>
                    <span className="ml-2 text-gray-900">{selectedMessage.candidateEmail}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">Position:</span>
                    <span className="ml-2 text-gray-900">{selectedMessage.position}</span>
                  </div>
                  <div>
                    <span className="text-gray-500">Priority:</span>
                    <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(selectedMessage.priority)}`}>
                      {selectedMessage.priority}
                    </span>
                  </div>
                </div>
              </div>

              {/* Communication Details */}
              <div>
                <h3 className="text-sm font-medium text-gray-900 mb-3">Communication Details</h3>
                <div className="space-y-3">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Date & Time:</span>
                      <span className="ml-2 text-gray-900">{formatTimestamp(selectedMessage.timestamp)}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Status:</span>
                      <span className="ml-2 flex items-center gap-1">
                        {getStatusIcon(selectedMessage.status)}
                        <span className="capitalize">{selectedMessage.status}</span>
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-500">HR Representative:</span>
                      <span className="ml-2 text-gray-900">{selectedMessage.hrUser}</span>
                    </div>
                    {selectedMessage.duration && (
                      <div>
                        <span className="text-gray-500">Duration:</span>
                        <span className="ml-2 text-gray-900">{selectedMessage.duration} minutes</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Subject (for emails) */}
              {selectedMessage.subject && (
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Subject</h3>
                  <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
                    {selectedMessage.subject}
                  </p>
                </div>
              )}

              {/* Message Content */}
              <div>
                <h3 className="text-sm font-medium text-gray-900 mb-2">
                  {selectedMessage.type === 'call' || selectedMessage.type === 'video' ? 'Call Summary' : 'Message'}
                </h3>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-700 whitespace-pre-wrap">
                    {selectedMessage.content}
                  </p>
                </div>
              </div>

              {/* Attachments */}
              {selectedMessage.attachments && selectedMessage.attachments.length > 0 && (
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Attachments</h3>
                  <div className="space-y-2">
                    {selectedMessage.attachments.map((attachment, index) => (
                      <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
                        <DocumentTextIcon className="w-5 h-5 text-gray-500" />
                        <span className="text-sm text-gray-700">{attachment}</span>
                        <button className="ml-auto text-[#0891b2] hover:text-[#0fc4b5] text-sm font-medium">
                          Download
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Tags */}
              {selectedMessage.tags && selectedMessage.tags.length > 0 && (
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Tags</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedMessage.tags.map((tag, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {/* Follow-up */}
              {selectedMessage.followUp && (
                <div>
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Follow-up Reminder</h3>
                  <div className="flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <CalendarDaysIcon className="w-5 h-5 text-yellow-600" />
                    <span className="text-sm text-yellow-800">
                      Scheduled for: {selectedMessage.followUp}
                    </span>
                  </div>
                </div>
              )}
            </div>

            {/* Modal Footer */}
            <div className="p-6 border-t border-gray-200 bg-gray-50 rounded-b-xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Link
                    href={`/dashboard/candidates/${selectedMessage.candidateId}`}
                    className="px-4 py-2 text-[#0891b2] hover:text-[#0fc4b5] border border-[#0891b2] hover:border-[#0fc4b5] rounded-lg font-medium text-sm transition-colors"
                  >
                    View Candidate Profile
                  </Link>
                  <button className="px-4 py-2 bg-[#0891b2] text-white rounded-lg hover:bg-[#0fc4b5] transition-colors font-medium text-sm">
                    Reply
                  </button>
                </div>
                <button
                  onClick={() => setSelectedMessage(null)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg font-medium text-sm transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
